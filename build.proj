<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="All" InitialTargets="Configure" TreatAsLocalProperty="RootSuffix" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<Import Project="build.props" />

	<PropertyGroup Condition="'$(IsCIBuild)' != 'true'">
		<!-- Local build defaults -->
		<Configuration Condition=" '$(Configuration)' == ''">Debug</Configuration>
		<DeployExtension Condition=" '$(DeployExtension)' == ''">true</DeployExtension>
		<RunCodeAnalysis Condition=" '$(RunCodeAnalysis)' == ''">false</RunCodeAnalysis>
	</PropertyGroup>
	<PropertyGroup Condition="'$(IsCIBuild)' == 'true'">
		<Configuration Condition=" '$(Configuration)' == ''">Release</Configuration>
		<DeployExtension Condition=" '$(DeployExtension)' == ''">false</DeployExtension>
		<RunCodeAnalysis Condition=" '$(RunCodeAnalysis)' == ''">true</RunCodeAnalysis>
	</PropertyGroup>
	
	<PropertyGroup>
		<IntermediateOutputPath>.nuget\</IntermediateOutputPath>
		<PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
		<CommonBuildProperties>WarningLevel=0;NoWarn=1591;Out=$(Out);Configuration=$(Configuration);DeployExtension=$(DeployExtension);RunCodeAnalysis=$(RunCodeAnalysis)</CommonBuildProperties>
		<DefaultImportance Condition=" '$(DefaultImportance)' == '' ">high</DefaultImportance>
	</PropertyGroup>

	<ItemGroup>
		<Solution Include="src\Build\NuGet.Build.Packaging.sln" />
		<Solution Include="external\clide\src\Clide.Tasks.sln" />
		<Solution Include="src\VisualStudio\NuGet.Packaging.VisualStudio.sln" />
		<TestProject Include="src\Build\**\*Tests.csproj" />
		<PackSolution Include="src\Build\NuGet.Build.Packaging.sln" />
	</ItemGroup>

	<Target Name="All" DependsOnTargets="Build;Test;Package" />

	<Target Name="Clean">
		<MSBuild Projects="@(Solution)" BuildInParallel="true" Properties="$(CommonBuildProperties)" Targets="Clean" />
		<Exec Command="rmdir .vs /S /Q" ContinueOnError="true" />
		<Exec Command="rmdir $(Out) /S /Q" Condition=" Exists('$(Out)') " ContinueOnError="true" />
		<Exec Command="rmdir $(PackagesPath) /S /Q" Condition=" Exists('$(PackagesPath)') " ContinueOnError="true" />
	</Target>

	<Target Name="Rebuild" DependsOnTargets="Clean;Build" />

	<Target Name="Build">
		<Exec Command="rmdir $(Out) /S /Q" Condition=" Exists('$(Out)') " ContinueOnError="true" StandardOutputImportance="low" />
		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
		<Message Text="Build properties: $(CommonBuildProperties)" Importance="high" />
		<MSBuild Projects="@(Solution)" BuildInParallel="false" Properties="$(CommonBuildProperties)" />
	</Target>

	<Target Name="Package" DependsOnTargets="Build">
		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
		<MSBuild Projects="@(PackSolution)" Properties="$(CommonBuildProperties);PackageOutputPath=$(Out);PackOnBuild=true" />
		<ItemGroup>
			<OutputFile Include="$(Out)\*.nupkg" />
			<OutputFile Include="$(Out)\*.vsix" />
		</ItemGroup>
		<Copy SourceFiles="@(OutputFile)" DestinationFolder="$(MSBuildThisFileDirectory)" Condition="'$(APPVEYOR)' == 'true'"/>
	</Target>

	<Target Name="Test" DependsOnTargets="Build">
		<MSBuild Projects="@(TestProject)" BuildInParallel="true" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>
		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition="Exists('%(FullPath)')" />
		</ItemGroup>
		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

		<xunit Assemblies="@(TestAssembly)"
			   Html="$(Out)\test.html"
			   Xml="$(Out)\test.xml"
			   ParallelizeAssemblies="true"
			   ParallelizeTestCollections="true" />
	</Target>

	<Target Name="Coverage" DependsOnTargets="Build">
		<!-- Run tests but using code coverage -->
		<MSBuild Projects="@(TestProject)" BuildInParallel="true" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
			<Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
		</MSBuild>
		<ItemGroup>
			<TestAssembly Include="@(_TestAssembly)" Condition="Exists('%(FullPath)')" />
		</ItemGroup>
		<MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

		<PropertyGroup>
			<XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel none -noshadow</XunitOptions>

			<CoverageConsole>$(PackagesPath)\OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
			<CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -returntargetcode -register:user -filter:"+[NuGet.Build.Packaging*]* -[NuGet.Packaging.Core*]* -[NuGet.Packaging.VisualStudio*]* -[Clide*]* -[xunit*]* -[*Tests]* -[*]*ThisAssembly*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash</CoverageOptions>
			<CoverageCommand>$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:"@(TestAssembly, ' ') $(XunitOptions)"</CoverageCommand>

			<ReportConsole>$(PackagesPath)\ReportGenerator\tools\ReportGenerator.exe</ReportConsole>
			<ReportOptions>-reports:$(Out)\coverage.xml -targetdir:$(Out)\coverage -reporttypes:Html;Xml;Badges</ReportOptions>
		</PropertyGroup>

		<Message Importance="high" Text="Executing: $(CoverageCommand)" />
		<Exec Command="$(CoverageCommand)"
			  ConsoleToMSBuild="true"
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal" />

		<MakeDir Directories="$(Out)\coverage" Condition="!Exists('$(Out)\coverage')" />
		<Exec Command="$(ReportConsole) $(ReportOptions)"
				  ConsoleToMSBuild="true"
				  StandardErrorImportance="high"
				  StandardOutputImportance="normal" />

		<Exec Command="start $(Out)\coverage\index.htm" />
	</Target>

	<!-- Configure and restore initial targets and packages -->
	<Import Project="src\NuGet.Restore.targets" />
	<PropertyGroup>
		<GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
		<XunitConsole>$(PackagesPath)\xunit.runner.console\tools\xunit.console.x86.exe</XunitConsole>
		<XunitBuildDir>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '.nuget', 'packages', 'xunit.runner.msbuild', 'build'))</XunitBuildDir>
		<XunitPlatformDir Condition=" Exists('$(XunitBuildDir)') ">$([System.IO.Directory]::GetDirectories($(XunitBuildDir))[0])</XunitPlatformDir>
		<!-- This file is used to detect whether the restore has been performed or not -->
		<XunitProps>$([System.IO.Path]::Combine($(XunitPlatformDir), 'xunit.runner.msbuild.props'))</XunitProps>
		<PendingRestore Condition=" !Exists('$(GitInfoTargets)') Or !Exists('$(XunitConsole)') Or !Exists('$(XunitProps)') ">true</PendingRestore>
	</PropertyGroup>
	<Import Project="$(XunitProps)" Condition="Exists('$(XunitProps)')"/>

	<Target Name="Configure" DependsOnTargets="DownloadNuGet">
		<Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion -Verbosity quiet'
			  StandardOutputImportance="low"
			  Condition=" '$(PendingRestore)' == 'true' " />

		<!-- Invoke GitVersion just like the project-level targets do -->
		<MSBuild Projects="$(GitInfoTargets)" Targets="GitVersion;GitInfoReport" Properties="GitInfoReportImportance=high">
			<Output TaskParameter="TargetOutputs" ItemName="GitInfo" />
		</MSBuild>

		<!-- For now this is an informative version #, used to update CI -->
		<PropertyGroup>
			<GitSemVerDashLabel>%(GitInfo.GitSemVerDashLabel)</GitSemVerDashLabel>
			<GitSemVerDashLabel Condition="'%(GitInfo.GitBranch)' == 'dev'">-dev</GitSemVerDashLabel>
			<GitSemVerDashLabel Condition="'%(GitInfo.GitBranch)' == 'undefined'">-pr</GitSemVerDashLabel>
			<GitSemVerDashLabel Condition="'$(APPVEYOR_PULL_REQUEST_NUMBER)' != ''">-pr$(APPVEYOR_PULL_REQUEST_NUMBER)</GitSemVerDashLabel>
			<Version>%(GitInfo.GitSemVerMajor).%(GitInfo.GitSemVerMinor).%(GitInfo.GitSemVerPatch)$(GitSemVerDashLabel)</Version>
		</PropertyGroup>

		<Message Text="Building version $(Version)" Importance="high" />

		<!-- Update AppVeyor build # to match the actual one being used -->
		<Exec Command="appveyor UpdateBuild -Version $(Version)" Condition=" '$(APPVEYOR)' == 'true' "
              ConsoleToMSBuild="true"
              ContinueOnError="WarnAndContinue" />
	</Target>
</Project>
