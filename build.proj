<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" DefaultTargets="All" InitialTargets="Configure" TreatAsLocalProperty="RootSuffix" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <Import Project="build.props" />

  <PropertyGroup Condition="'$(IsCIBuild)' != 'true'">
    <!-- Local build defaults -->
    <Configuration Condition=" '$(Configuration)' == ''">Debug</Configuration>
  </PropertyGroup>
  <PropertyGroup Condition="'$(IsCIBuild)' == 'true'">
    <Configuration Condition=" '$(Configuration)' == ''">Release</Configuration>
  </PropertyGroup>

  <PropertyGroup>
    <NuGetUrl Condition=" '$(NuGetUrl)' == '' ">https://dist.nuget.org/win-x86-commandline/v3.4.4/NuGet.exe</NuGetUrl>
    <RestorePackages>false</RestorePackages>
    <RunCodeAnalysis Condition=" '$(RunCodeAnalysis)' == ''">false</RunCodeAnalysis>
    <IntermediateOutputPath>.nuget\</IntermediateOutputPath>
    <PackagesPath>$(IntermediateOutputPath)packages</PackagesPath>
    <CommonBuildProperties>WarningLevel=0;NoWarn=1591;Out=$(Out);Configuration=$(Configuration);RunCodeAnalysis=$(RunCodeAnalysis);PackageOutputPath=$(Out)</CommonBuildProperties>
    <DefaultImportance Condition=" '$(DefaultImportance)' == '' ">high</DefaultImportance>
    <PS>%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PS>
  </PropertyGroup>

  <ItemGroup>
    <Solution Include="src\Build\NuGet.Build.Packaging.sln" />
    <Solution Include="src\VisualStudio\NuGet.Packaging.VisualStudio.15\NuGet.Packaging.VisualStudio.15.csproj" />
    <TestProject Include="src\Build\**\*Tests.csproj" />
  </ItemGroup>

  <Target Name="All" DependsOnTargets="Build;Test;Package" />

  <Target Name="Clean">
    <MSBuild Projects="@(Solution)" BuildInParallel="true" Properties="$(CommonBuildProperties)" Targets="Clean" />
    <Exec Command="rmdir .vs /S /Q" ContinueOnError="true" />
    <Exec Command="rmdir $(Out) /S /Q" Condition=" Exists('$(Out)') " ContinueOnError="true" />
    <Exec Command="rmdir $(PackagesPath) /S /Q" Condition=" Exists('$(PackagesPath)') " ContinueOnError="true" />
  </Target>

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Target Name="Build">
    <Exec Command="rmdir $(Out) /S /Q" Condition=" Exists('$(Out)') " ContinueOnError="true" StandardOutputImportance="low" />
    <MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
    <Message Text="Build properties: $(CommonBuildProperties)." Importance="high" />
    <MSBuild Projects="@(Solution)" BuildInParallel="false" Properties="$(CommonBuildProperties);CreateVsixContainer=false;DeployExtension=false" />
  </Target>

  <Target Name="Package">
    <MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />
    <MSBuild Projects="src\Build\NuGet.Build.Packaging.Tasks\NuGet.Build.Packaging.Tasks.csproj" Targets="Pack" Properties="$(CommonBuildProperties);PackOnBuild=true" />
    <MSBuild Projects="src\VisualStudio\NuGet.Packaging.VisualStudio.15\NuGet.Packaging.VisualStudio.15.csproj" Properties="$(CommonBuildProperties);PackOnBuild=true" />
    <ItemGroup>
      <OutputFile Include="$(Out)\*.nupkg" />
      <OutputFile Include="$(Out)\*.vsix" />
    </ItemGroup>
    <Copy SourceFiles="@(OutputFile)" DestinationFolder="$(MSBuildThisFileDirectory)" Condition="'$(APPVEYOR)' == 'true'"/>
  </Target>

  <Target Name="Test" DependsOnTargets="Build">
    <MSBuild Projects="@(TestProject)" BuildInParallel="true" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
    </MSBuild>
    <ItemGroup>
      <TestAssembly Include="@(_TestAssembly)" Condition="Exists('%(FullPath)')" />
    </ItemGroup>
    <MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

    <PropertyGroup>
      <XunitConsole>"$(PackagesPath)\xunit.runner.console\tools\xunit.console.exe"</XunitConsole>
      <XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel all -noshadow</XunitOptions>
    </PropertyGroup>

    <Exec Command="$(XunitConsole) @(TestAssembly, ' ') $(XunitOptions)" ConsoleToMSBuild="true" />
  </Target>

  <Target Name="Restore">
    <ItemGroup>
      <NuGetRestore Include="external\ApiIntersect\ApiIntersect.sln" />
      <NuGetRestore Include="src\Build\NuGet.Build.Packaging.Tests\Scenarios\given_a_library_with_non_nugetized_reference\b.sln" />
      <NuGetRestore Include="src\Build\NuGet.Build.Packaging.Tests\Scenarios\given_a_multi_platform_solution\forms.sln" />
      <NuGetRestore Include="src\Build\NuGet.Build.Packaging.Tests\Scenarios\given_a_library_with_json_dependencies\project.json" />
      <MSBuildRestore Include="src\Build\NuGet.Build.Packaging.Tests\Scenarios\given_a_packaging_project_with_netstandard\a.nuproj" />

      <MSBuildRestore Include="src\Build\NuGet.Build.Packaging.sln" />
      <MSBuildRestore Include="src\VisualStudio\NuGet.Packaging.VisualStudio.sln" />
    </ItemGroup>

    <Exec Command='"$(NuGet)" Restore "%(NuGetRestore.Identity)" -Verbosity quiet'
          WorkingDirectory='%(RestoreSolution.RootDir)%(RestoreSolution.Directory)'/>
    
    <Exec Command='"$(MSBuildBinPath)\MSBuild.exe" /t:Restore "%(MSBuildRestore.Identity)" /v:Minimal'
          WorkingDirectory='%(RestoreSolution.RootDir)%(RestoreSolution.Directory)'/>
  </Target>

  <Target Name="Coverage" DependsOnTargets="Build">
    <!-- Run tests but using code coverage -->
    <MSBuild Projects="@(TestProject)" BuildInParallel="true" Targets="GetTargetPath" Properties="$(CommonBuildProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="_TestAssembly" />
    </MSBuild>
    <ItemGroup>
      <TestAssembly Include="@(_TestAssembly)" Condition="Exists('%(FullPath)')" />
    </ItemGroup>
    <MakeDir Directories="$(Out)" Condition="!Exists('$(Out)')" />

    <PropertyGroup>
      <XunitOptions>$(XunitOptions) -html $(Out)\test.html -xml $(Out)\test.xml -parallel none -noshadow </XunitOptions>

      <CoverageConsole>$(PackagesPath)\OpenCover\tools\OpenCover.Console.exe</CoverageConsole>
      <CoverageOptions>$(CoverageOptions) -output:$(Out)\coverage.xml -returntargetcode -register:user -filter:"+[NuGet.Build.Packaging*]* -[NuGet.Packaging.Core*]* -[NuGet.Packaging.VisualStudio*]* -[Clide*]* -[xunit*]* -[*Tests]* -[*]*ThisAssembly*" -excludebyattribute:*ExcludeFromCodeCoverage*;*CompilerGenerated* -skipautoprops -showunvisited -mergebyhash</CoverageOptions>
      <CoverageCommand>$(CoverageConsole) $(CoverageOptions) -target:$(XunitConsole) -targetargs:"@(TestAssembly, ' ') $(XunitOptions)"</CoverageCommand>

      <ReportConsole>$(PackagesPath)\ReportGenerator\tools\ReportGenerator.exe</ReportConsole>
      <ReportOptions>-reports:$(Out)\coverage.xml -targetdir:$(Out)\coverage -reporttypes:Html;Xml;Badges</ReportOptions>
    </PropertyGroup>

    <Message Importance="high" Text="Executing: $(CoverageCommand)" />
    <Exec Command="$(CoverageCommand)"
			  ConsoleToMSBuild="true"
			  StandardErrorImportance="high"
			  StandardOutputImportance="normal" />

    <MakeDir Directories="$(Out)\coverage" Condition="!Exists('$(Out)\coverage')" />
    <Exec Command="$(ReportConsole) $(ReportOptions)"
				  ConsoleToMSBuild="true"
				  StandardErrorImportance="high"
				  StandardOutputImportance="normal" />

    <Exec Command="start $(Out)\coverage\index.htm" />
  </Target>

  <!-- Configure and restore initial targets and packages -->
  <Import Project="src\NuGet.Restore.targets" />
  <PropertyGroup>
    <GitInfoTargets>$(PackagesPath)\GitInfo\build\GitInfo.targets</GitInfoTargets>
    <XunitConsole>$(PackagesPath)\xunit.runner.console\tools\xunit.console.x86.exe</XunitConsole>
    <XunitBuildDir>$([System.IO.Path]::Combine('$(MSBuildThisFileDirectory)', '.nuget', 'packages', 'xunit.runner.msbuild', 'build'))</XunitBuildDir>
    <XunitProps>$([System.IO.Path]::Combine($(XunitBuildDir), 'xunit.runner.msbuild.props'))</XunitProps>
    <PendingRestore Condition=" !Exists('$(GitInfoTargets)') Or !Exists('$(XunitConsole)') Or !Exists('$(XunitProps)') ">true</PendingRestore>
  </PropertyGroup>
  <Import Project="$(XunitProps)" Condition="Exists('$(XunitProps)')"/>
  <Target Name="GitVersion">
    <PropertyGroup>
      <GitSemVerMajor>1</GitSemVerMajor>
      <GitSemVerMinor>0</GitSemVerMinor>
      <GitSemVerPatch>0</GitSemVerPatch>
    </PropertyGroup>
  </Target>
  <Import Project="$(GitInfoTargets)" Condition="Exists('$(GitInfoTargets)')"/>
  <Import Project="src\PackageVersion.targets" />

  <Target Name="Configure" DependsOnTargets="DownloadNuGet;GetPackageVersion">
    <Message Importance="high" Text="*********************************************************************************************************************" />
    <Message Importance="high" Text="$([System.Environment]::CommandLine)" />
    <Message Importance="high" Text="*********************************************************************************************************************" />

    <Exec Command='"$(NuGet)" Install "$(MSBuildThisFileDirectory)packages.config" -OutputDirectory "$(PackagesPath)" -ExcludeVersion -Verbosity quiet'
			  StandardOutputImportance="low"
			  Condition=" '$(PendingRestore)' == 'true' " />

    <!-- Invoke GitVersion just like the project-level targets do -->
    <MSBuild Projects="$(GitInfoTargets)" Targets="GitVersion;GitInfoReport" Properties="GitInfoReportImportance=high">
      <Output TaskParameter="TargetOutputs" ItemName="GitInfo" />
    </MSBuild>

    <!-- For now this is an informative version #, used to update CI -->
    <Message Text="Building version $(PackageVersion)" Importance="high" />

    <!-- Update AppVeyor build # to match the actual one being used -->
    <Exec Command="appveyor UpdateBuild -Version $(PackageVersion)" Condition=" '$(APPVEYOR)' == 'true' "
              ConsoleToMSBuild="true"
              ContinueOnError="WarnAndContinue" />
  </Target>
</Project>
