<?xml version="1.0" encoding="utf-8" standalone="no"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<PropertyGroup>
		<AssemblyOriginatorKeyFile>$(MSBuildThisFileDirectory)VisualStudio.snk</AssemblyOriginatorKeyFile>
		<PublicSign>false</PublicSign>
		<SignAssembly>true</SignAssembly>
	</PropertyGroup>
	<Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), NuGet.Build.Packaging.Shared.targets))\NuGet.Build.Packaging.Shared.targets" />

	<PropertyGroup>
		<DeployExtension Condition="'$(Configuration)' != 'Debug' Or '$(VisualStudioVersion)' != '$(TargetVSVersion)'" >false</DeployExtension>
		<SkipValidatePackageReferences>true</SkipValidatePackageReferences>
		
		<StartAction>Program</StartAction>
		<StartProgram Condition="'$(VisualStudioVersion)' &lt; '15.0'">$(MSBuildProgramFiles32)\Microsoft Visual Studio $(VisualStudioVersion)\Common7\IDE\devenv.exe</StartProgram>
		<StartProgram Condition="'$(VisualStudioVersion)' &gt;= '15.0'">$(VsInstallRoot)\Common7\IDE\devenv.exe</StartProgram>
		<StartArguments>/rootsuffix exp</StartArguments>
		<NoGlobalAssemblyInfo>true</NoGlobalAssemblyInfo>
		<XmlNs>&lt;Namespace Prefix='vs' Uri='http://schemas.microsoft.com/developer/vstemplate/2005'/&gt;</XmlNs>
	</PropertyGroup>

	<!-- Embeds the NuGetizer package into the VSIX -->
	<ItemGroup>
		<!-- NOTE: this will only work if the solution was built at least once from the command line, 
			 since the project reference below would have built the package in that case. -->
		<Content Include="$(Out)\*.nupkg" Condition="'$(BuildingInsideVisualStudio)' == 'true' Or '$(PackOnBuild)' == 'false'">
			<Link>%(Filename)%(Extension)</Link>
			<IncludeInVSIX>true</IncludeInVSIX>
			<VSIXSubPath>Packages</VSIXSubPath>
		</Content>
		<!-- We can't reference the project when building from VS because that will lock the output tasks assembly -->
		<ProjectReference Include="..\..\Build\NuGet.Build.Packaging.Tasks\NuGet.Build.Packaging.Tasks.csproj"
						  Condition="'$(BuildingInsideVisualStudio)' != 'true' And '$(PackOnBuild)' != 'false'">
			<Project>{a3d231d7-31e4-4a70-8cd1-7246c7d069f6}</Project>
			<Name>NuGet.Build.Packaging.Tasks</Name>
			<AdditionalProperties>PackOnBuild=true;PackageOutputPath=$(Out)</AdditionalProperties>
			<IncludeOutputGroupsInVSIXLocalOnly>PackageOutputGroup</IncludeOutputGroupsInVSIXLocalOnly>
			<IncludeOutputGroupsInVSIX>PackageOutputGroup</IncludeOutputGroupsInVSIX>
			<Private>False</Private>
			<VSIXSubPath>Packages</VSIXSubPath>
		</ProjectReference>
	</ItemGroup>

	<Target Name="EnsureNuGetizerPackage"
			Condition="'$(CreateVsixContainer)' != 'false' And '$(DeployExtension)' != 'false'"
			DependsOnTargets="GetVersion" 
			BeforeTargets="DeployVsixExtensionFiles;CreateVsixContainer">
		<ItemGroup>
			<_NuGetizerPackage Include="$(Out)\*.nupkg" />
			<_CurrentNuGetizerPackage Include="@(_NuGetizerPackage)"
									  Condition="$([System.String]::New('%(Filename)').Replace('NuGet.Build.Packaging.', '')) == '$(Version)'" />
		</ItemGroup>

		<PropertyGroup>
			<_NuGetizerPackageExists Condition="'@(_NuGetizerPackage -> Count())' != '0'">true</_NuGetizerPackageExists>
			<_CurrentNuGetizerPackageExists Condition="'@(_CurrentNuGetizerPackage -> Count())' != '0'">true</_CurrentNuGetizerPackageExists>
		</PropertyGroup>

		<Delete Files="$(TargetPath)" Condition="'$(_NuGetizerPackageExists)' != 'true' Or '$(_CurrentNuGetizerPackageExists)' != 'true'" />

		<Error Condition="'$(_NuGetizerPackageExists)' != 'true'" Text="NuGetizer nuget package was not found under '$(Out)'. 
  Run 'build.cmd' at least once, or run 'msbuild' from the 'src\Build' folder to build the nuget package." />
		
		<Error Condition="'$(_CurrentNuGetizerPackageExists)' != 'true'" Text="Required NuGetizer nuget package version '$(Version)' was not found under '$(Out)'. 
  Run 'build.cmd' at least once, or run 'msbuild' from the 'src\Build' folder to build the nuget package.
  Packages found were: %0a@(_NuGetizerPackage -> '    %(Filename)%(Extension)', '%0a')" />
	</Target>

	<Target Name="GetVersion" DependsOnTargets="GitVersion" Returns="$(Version)">
		<PropertyGroup>
			<Version>$(GitSemVerMajor).$(GitSemVerMinor).$(GitSemVerPatch)</Version>
		</PropertyGroup>
	</Target>

	<PropertyGroup>
		<UpdateTemplatesDependsOn>
			PrepareForBuild;
			CopyOutOfDateSmartTemplateContent;
			GetPackageVersion;
			FindTemplates;
			UpdateTemplatePackages
		</UpdateTemplatesDependsOn>
	</PropertyGroup>

	<Target Name="UpdateTemplates"
			AfterTargets="CopyOutOfDateSmartTemplateContent"
			BeforeTargets="ZipSmartTemplateContent"
			DependsOnTargets="$(UpdateTemplatesDependsOn)" />

	<Target Name="FindTemplates">
		<ItemGroup>
			<IntermediateTemplate Include="@(SmartTemplateContentWithTargetPath->'$(SmartTemplateIntermediateOutputPath)%(TargetPath)')"
								  Condition="'%(Extension)' == '.vstemplate'"/>
		</ItemGroup>
	</Target>

	<Target Name="UpdateTemplatePackages"
			Inputs="@(IntermediateTemplate)"
			Outputs="%(IntermediateTemplate.Identity)-BATCH"
			DependsOnTargets="FindTemplates">

		<XmlPoke Namespaces="$(XmlNs)"
				 XmlInputPath="%(IntermediateTemplate.FullPath)"
				 Query="/vs:VSTemplate/vs:WizardData/vs:packages/vs:package[@id='NuGet.Build.Packaging']/@version"
				 Value="$(PackageVersion)"/>
	</Target>

	<Target Name="CopyVsixToOut" AfterTargets="CreateVsixContainer" DependsOnTargets="GetVersion"
			Condition="'$(Out)' != '' And '$(CreateVsixContainer)' == 'true' And Exists('$(TargetVsixContainer)')">
		<ItemGroup>
			<TargetVsixContainer Include="$(TargetVsixContainer)" />
		</ItemGroup>
		<!-- Copy the evergreen filename -->
		<Copy SourceFiles="@(TargetVsixContainer)" DestinationFolder="$(Out)" />
		<!-- And also a versioned filename -->
		<Copy SourceFiles="@(TargetVsixContainer)" DestinationFiles="$(Out)\%(TargetVsixContainer.Filename).$(Version)%(TargetVsixContainer.Extension)" />
	</Target>

	<!-- Because envdte comes from a nuget package, we can't set the EmbedInteropTypes to true in the project, so we do it here -->
	<Target Name="EmbedInteropTypes" AfterTargets="ResolveNuGetPackageAssets">
		<ItemGroup>
			<Reference Condition=" '%(Filename)' == 'envdte80' ">
				<EmbedInteropTypes>True</EmbedInteropTypes>
			</Reference>
			<Reference Condition=" '%(Filename)' == 'NuGet.VisualStudio' ">
				<EmbedInteropTypes>True</EmbedInteropTypes>
			</Reference>
			<Reference Condition=" '%(Filename)' == 'VSLangProj150' ">
				<EmbedInteropTypes>True</EmbedInteropTypes>
			</Reference>
		</ItemGroup>
	</Target>

	<Target Name="CopyLocalAssemblies" AfterTargets="ResolveNuGetPackageAssets">
		<ItemGroup>
			<Reference Condition=" '%(Filename)' == 'Clide.Interfaces' ">
				<CopyLocal>true</CopyLocal>
				<Private>true</Private>
			</Reference>
		</ItemGroup>
	</Target>

</Project>