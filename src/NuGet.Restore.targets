<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <NuGetPath Condition=" '$(NuGetPath)' == '' ">$(MSBuildThisFileDirectory).nuget</NuGetPath>
    <NuGetUrl Condition=" '$(NuGetUrl)' == '' ">https://dist.nuget.org/win-x86-commandline/latest/nuget.exe</NuGetUrl>
    <NuGet Condition=" '$(NuGet)' == '' ">$(NuGetPath)\nuget.exe</NuGet>
    <Mono Condition=" '$(OS)' != 'Windows_NT' ">mono</Mono>
    <TEMP Condition=" '$(OS)' != 'Windows_NT' ">$(TMPDIR)</TEMP>
    <BaseUrl Condition=" '$(BaseUrl)' == '' ">https://raw.githubusercontent.com/kzu/NuGet.Restore/master/</BaseUrl>
    <CurlUrl Condition=" '$(CurlUrl)' == '' ">$(BaseUrl)curl.exe</CurlUrl>
    <CurlArgs Condition=" '$(CurlArgs)' == '' ">-k -f -L</CurlArgs>
    <Curl Condition=" '$(OS)' == 'Windows_NT' ">"$(TEMP)\curl.exe" $(CurlArgs)</Curl>
    <Curl Condition=" '$(OS)' != 'Windows_NT' ">curl $(CurlArgs)</Curl>
    <TargetsFile>$(MSBuildThisFilename)$(MSBuildThisFileExtension)</TargetsFile>
  </PropertyGroup>
  <!-- Add current solution as one more solution to restore -->
  <ItemGroup>
    <RestoreSolution Include="$(SolutionPath)" Condition=" '$(SolutionPath)' != '' " />
  </ItemGroup>
  <ItemDefinitionGroup>
    <RestoreSolution>
      <Command>Restore</Command>
      <Args>-verbosity quiet</Args>
    </RestoreSolution>
  </ItemDefinitionGroup>
  <Target Name="RestorePackages" BeforeTargets="Build" DependsOnTargets="DownloadNuGet;RestoreSolutions" Condition=" '$(RestorePackages)' != 'false' " />
  <Target Name="EnsureBeforeSolutionImport">
    <Error Text="This targets file should ONLY be imported from a file named Before.$(SolutionFileName).targets alongside the solution file." Condition="!$(MSBuildProjectFile.Contains('$(SolutionFileName)'))" />
  </Target>
  <Target Name="RestoreSolutions" Inputs="@(RestoreSolution)" Outputs="%(RestoreSolution.Identity)-BATCH">
    <PropertyGroup>
      <!-- The base restore directory can be overriden via the Before.*.targets file, but we default to the solution path, like NuGet does -->
      <RestoreDir Condition=" '$(RestoreDir)' == '' And '$(SolutionPath)' != '' ">$([System.IO.Path]::GetDirectoryName('$(SolutionPath)'))</RestoreDir>
    </PropertyGroup>
    <PropertyGroup>
      <!-- Normalizes paths to all be relative to the RestoreDir, to shorten the Exec Command length -->
      <_NuGet>$(NuGet.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_NuGet>
    </PropertyGroup>
    <CreateProperty Value="%(RestoreSolution.Command)">
      <Output PropertyName="_RestoreCommand" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.FullPath)">
      <Output PropertyName="_RestoreSolution" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.OutputDirectory)">
      <Output PropertyName="_RestoreOutput" TaskParameter="Value" />
    </CreateProperty>
    <CreateProperty Value="%(RestoreSolution.Args)">
      <Output PropertyName="_RestoreArgs" TaskParameter="Value" />
    </CreateProperty>
    <PropertyGroup>
      <_RestoreSolution Condition=" '$(OS)' != 'Unix' ">$(_RestoreSolution.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_RestoreSolution>
      <_RestoreOutput Condition=" '$(OS)' != 'Unix' And '$(_RestoreOutput)' != ''">$(_RestoreOutput.Replace('$(RestoreDir)', '').TrimStart('/').TrimStart('\'))</_RestoreOutput>
      <!-- The default value from ItemDefinitionGroup isn't being picked up by xbuild -->
      <_RestoreCommand Condition=" '$(_RestoreCommand)' == '' ">Restore</_RestoreCommand>
    </PropertyGroup>
    <Exec Command="$(Mono) &quot;$(_NuGet)&quot; $(_RestoreCommand) &quot;$(_RestoreSolution)&quot; $(_RestoreArgs)" Condition="'$(_RestoreOutput)' == ''" WorkingDirectory="$(RestoreDir)" />
    <Exec Command="$(Mono) &quot;$(_NuGet)&quot; $(_RestoreCommand) &quot;$(_RestoreSolution)&quot; -OutputDirectory &quot;$(_RestoreOutput)&quot; $(_RestoreArgs)" Condition="'$(_RestoreOutput)' != ''" WorkingDirectory="$(RestoreDir)" />
  </Target>
  <!-- Initializes a Before.[sln].targets file for every solution found recursively -->
  <Target Name="Init" DependsOnTargets="DownloadCurl">
    <ItemGroup>
      <SolutionFile Include="$(MSBuildStartupDirectory)\**\*.sln" />
      <SolutionToInit Include="@(SolutionFile)" Condition=" !Exists('%(RootDir)%(Directory)Before.%(Filename)%(Extension).targets') " />
    </ItemGroup>
    <Exec Command="$(Curl) -o &quot;$(TEMP)\Before.sln.targets&quot; &quot;$(BaseUrl)Before.sln.targets&quot;" ConsoleToMSBuild="true" />
    <Copy SourceFiles="@(SolutionToInit -&gt; '$(TEMP)\Before.sln.targets')" DestinationFiles="@(SolutionToInit -&gt; '%(RootDir)%(Directory)Before.%(Filename)%(Extension).targets')" />
  </Target>
  <Target Name="Update" DependsOnTargets="DownloadCurl">
    <Exec Command="$(Curl) -I &quot;$(TEMP)\$(TargetsFile)&quot; &quot;$(BaseUrl)$(TargetsFile)&quot;" StandardOutputImportance="low" ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="HttpResponse" />
    </Exec>
    <ItemGroup>
      <ETag Include="@(HttpResponse)" Condition="$([System.String]::new('%(Identity)').StartsWith('ETag:')) " />
    </ItemGroup>
    <PropertyGroup>
      <ETag>@(ETag)</ETag>
      <ETag>$(ETag.Substring(5).Trim().TrimStart('"').TrimEnd('"'))</ETag>
      <XmlNs>&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;</XmlNs>
      <UpdateFile Condition=" '$(UpdateFile)' == '' ">$(MSBuildThisFileFullPath)</UpdateFile>
    </PropertyGroup>
    <XmlPeek Namespaces="$(XmlNs)" XmlInputPath="$(MSBuildThisFileFullPath)" Query="/msb:Project/msb:PropertyGroup/msb:NuGetRestoreETag/text()">
      <Output TaskParameter="Result" PropertyName="CurrentETag" />
    </XmlPeek>
    <Message Importance="high" Text="New version found, updating $(TargetsFile)." Condition=" '$(CurrentETag)' != '$(ETag)' " />
    <Message Importance="high" Text="No updates found for $(TargetsFile)." Condition=" '$(CurrentETag)' == '$(ETag)' " />
    <!-- If the retrieved ETag doesn't match the saved one, we need to update the whole file -->
    <Exec Command="$(Curl) -o &quot;$(UpdateFile)&quot; &quot;$(BaseUrl)$(TargetsFile)&quot;" StandardOutputImportance="low" Condition=" '$(CurrentETag)' != '$(ETag)' " />
    <!-- NOTE: known issue, XmlPoke removes the whitespace, 
			 but then users aren't intended to edit the updated 
			 file but the one on the repo instead, via PRs :) -->
    <XmlPoke Namespaces="$(XmlNs)" XmlInputPath="$(UpdateFile)" Query="/msb:Project/msb:PropertyGroup/msb:NuGetRestoreETag" Value="$(ETag)" Condition=" '$(CurrentETag)' != '$(ETag)' " />
  </Target>
  <Target Name="DownloadNuGet" DependsOnTargets="DownloadCurl" Condition=" !Exists('$(NuGet)') ">
    <MakeDir Directories="$(NuGetPath)" Condition=" !Exists('$(NuGetPath)') " />
    <Exec Command="$(Curl) -o &quot;$(NuGet)&quot; &quot;$(NuGetUrl)&quot;" />
  </Target>
  <Target Name="DownloadCurl" Condition=" '$(OS)' == 'Windows_NT' And !Exists('$(TEMP)\curl.exe') ">
    <PropertyGroup>
      <PowerShell Condition=" '$(PowerShell)' == '' ">%WINDIR%\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShell>
    </PropertyGroup>
    <Exec Command="&quot;$(PowerShell)&quot; -NoProfile -Command &quot;&amp; { (New-Object System.Net.WebClient).DownloadFile('$(CurlUrl)', '$(TEMP)\curl.exe') }&quot;" />
  </Target>
  <PropertyGroup>
    <NuGetRestoreImported>true</NuGetRestoreImported>
    <NuGetRestoreETag>9d67f0c15f481ff2da50c51a8635ac9d27c533c8</NuGetRestoreETag>
  </PropertyGroup>
</Project>