<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<ItemGroup>
		<ThisAssemblyProjectProperty Include="PackageId" />
	</ItemGroup>
	
	<PropertyGroup>
		<PackageId>NuGet.Build.Packaging</PackageId>
		<Authors>Microsoft</Authors>
		<Owners>Microsoft</Owners>
		<Copyright>&#169; .NET Foundation. All rights reserved.</Copyright>
		<Title>NuGetizer-3000</Title>
		<Description>NuGet Packaging Targets</Description>
		<NeutralLanguage>en</NeutralLanguage>
		<IsDevelopmentDependency>true</IsDevelopmentDependency>
		<PackageLicenseUrl>https://raw.githubusercontent.com/NuGet/NuGet.Build.Packaging/dev/LICENSE.txt</PackageLicenseUrl>
		<PackageProjectUrl>https://github.com/NuGet/NuGet.Build.Packaging</PackageProjectUrl>

		<InferLegacyPackageReferences>false</InferLegacyPackageReferences>
		<IncludeContentInPackage>false</IncludeContentInPackage>
		<IncludeOutputsInPackage>false</IncludeOutputsInPackage>
		<IncludeSymbolsInPackage>false</IncludeSymbolsInPackage>
		<IncludeFrameworkReferencesInPackage>false</IncludeFrameworkReferencesInPackage>
	</PropertyGroup>

	<Import Project="$(OutputPath)NuGet.Build.Packaging.targets" 
			Condition="'$(PackOnBuild)' == 'true' and Exists('$(OutputPath)NuGet.Build.Packaging.targets')" />

	<Target Name="AddBuiltOutput" BeforeTargets="GetPackageContents" Returns="@(PackageFile)">
		<!-- Update packaging version targets -->
		<PropertyGroup>
			<XmlNs>&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;</XmlNs>
		</PropertyGroup>
		<XmlPoke Namespaces="$(XmlNs)"
				 XmlInputPath="$(OutputPath)NuGet.Build.Packaging.Version.props"
				 Query="/msb:Project/msb:PropertyGroup/msb:PackagingTargetsVersion"
				 Value="$(PackageVersion)"/>
		<ItemGroup>
			<PackageFile Include="$(OutputPath)ApiIntersect.exe">
				<PackagePath>build\ApiIntersect.exe</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)ApiIntersect.exe.config">
				<PackagePath>build\ApiIntersect.exe.config</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)ICSharpCode.Decompiler.dll">
				<PackagePath>build\ICSharpCode.Decompiler.dll</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)ICSharpCode.NRefactory.CSharp.dll">
				<PackagePath>build\ICSharpCode.NRefactory.CSharp.dll</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)ICSharpCode.NRefactory.dll">
				<PackagePath>build\ICSharpCode.NRefactory.dll</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)Mono.Cecil.dll">
				<PackagePath>build\Mono.Cecil.dll</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)Mono.Options.dll">
				<PackagePath>build\Mono.Options.dll</PackagePath>
			</PackageFile>
			<PackageFile Include="$(OutputPath)NuGet.Build.Packaging.Version.props">
				<PackagePath>build\NuGet.Build.Packaging.Version.props</PackagePath>
			</PackageFile>
			<PackageFile Include="@(ContentWithTargetPath)">
				<PackagePath>build\%(ContentWithTargetPath.TargetPath)</PackagePath>
			</PackageFile>
			<PackageFile Include="@(BuiltProjectOutputGroupOutput -> '%(FinalOutputPath)')">
				<PackagePath>build\%(Filename)%(Extension)</PackagePath>
			</PackageFile>
			<PackageFile Include="@(DebugSymbolsProjectOutputGroupOutput -> '%(FinalOutputPath)')">
				<PackagePath>build\%(Filename)%(Extension)</PackagePath>
			</PackageFile>
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<CoreCompileDependsOn>
			PackageItemKind;
			$(CoreCompileDependsOn);
		</CoreCompileDependsOn>
		<PackageItemKindFile>$(IntermediateOutputPath)PackageItemKind.g$(DefaultLanguageSourceExtension)</PackageItemKindFile>
	</PropertyGroup>

	<Target Name="PackageItemKind" BeforeTargets="BuildOnlySettings" DependsOnTargets="GeneratePackageItemKind">
		<ItemGroup>
			<Compile Include="$(PackageItemKindFile)" />
		</ItemGroup>
	</Target>

	<Target Name="GeneratePackageItemKind" Inputs="$(MSBuildThisFileFullPath);NuGet.Build.Packaging.props" Outputs="$(PackageItemKindFile)">
		<MakeDir Directories="$(IntermediateOutputPath)" Condition=" !Exists('$(IntermediateOutputPath)') " />
		<XmlPeek Namespaces="&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;"
					 Query="/msb:Project/msb:ItemGroup/msb:PackageItemKind/@Include"
					 XmlInputPath="$(MSBuildThisProjectDirectory)NuGet.Build.Packaging.props">
			<Output TaskParameter="Result" ItemName="_PackageItemKind" />
		</XmlPeek>

		<WriteLinesToFile Lines='
namespace $(RootNamespace)
{
	/// &lt;summary&gt;Available Kind metadata for PackageFile and _PackageContent items&lt;/summary&gt;
	public static partial class PackageItemKind
	{
' Overwrite='true' File='$(PackageItemKindFile)' />

		<WriteLinesToFile Lines='				  
		/// &lt;summary&gt;Kind: %(_PackageItemKind.Identity)&lt;/summary&gt;
		public const string %(_PackageItemKind.Identity) = nameof(%(_PackageItemKind.Identity))%3B
' Overwrite='false' File='$(PackageItemKindFile)' />

		<WriteLinesToFile Lines='
	}
}
' Overwrite='false' File='$(PackageItemKindFile)' />

		<ItemGroup>
			<FileWrites Include="$(PackageItemKindFile)" />
		</ItemGroup>
	</Target>

	<Target Name="AddMSBuildReferences" BeforeTargets="ResolveAssemblyReferences">
		<ItemGroup>
			<!-- TODO: to replace with the MSBuild nugets once they are more generally available -->
			<Reference Include="Microsoft.Build">
				<HintPath>$(MSBuildBinPath)\Microsoft.Build.dll</HintPath>
			</Reference>
			<Reference Include="Microsoft.Build.Framework">
				<HintPath>$(MSBuildBinPath)\Microsoft.Build.Framework.dll</HintPath>
			</Reference>
			<Reference Include="Microsoft.Build.Tasks.Core">
				<HintPath>$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll</HintPath>
			</Reference>
			<Reference Include="Microsoft.Build.Utilities.Core">
				<HintPath>$(MSBuildBinPath)\Microsoft.Build.Utilities.Core.dll</HintPath>
			</Reference>
		</ItemGroup>
	</Target>

	<PropertyGroup>
		<ILMerge>$(NuGetPackageRoot)ILRepack\2.0.12\tools\ILRepack.exe</ILMerge>
	</PropertyGroup>

	<Target Name="ILMerge"
			AfterTargets="CoreCompile"
			DependsOnTargets="CoreCompile"
			Inputs="@(IntermediateAssembly)"
			Outputs="$(TargetPath)"
			Returns="@(MergedAssemblies)"
			Condition="'$(Configuration)' == 'Release' And '$(ILMerge)' != 'false'">
		<GetReferenceAssemblyPaths BypassFrameworkInstallChecks="False" TargetFrameworkMoniker="$(TargetFrameworkMoniker)">
			<Output TaskParameter="FullFrameworkReferenceAssemblyPaths" PropertyName="FullFrameworkReferenceAssemblyPaths" />
		</GetReferenceAssemblyPaths>
		<ItemGroup>
			<MergedAssemblies Include="@(ReferenceCopyLocalPaths)" Condition="$([System.String]::new('%(FileName)').StartsWith('Newtonsoft'))" />
			<MergedAssemblies Include="@(ReferenceCopyLocalPaths)" Condition="$([System.String]::new('%(FileName)').StartsWith('NuGet'))" />
			<!--<UnmergedAssemblies Include="@(ReferenceCopyLocalPaths)" Exclude="@(MergedAssemblies)" />
			<UnmergedAssembliesDir Include="@(UnmergedAssemblies -> '%(RootDir)%(Directory)')" />-->
			<ReferenceCopyLocalDirs Include="@(ReferenceCopyLocalPaths -> '%(RootDir)%(Directory)')" />
			<ReferenceCopyLocalPaths Remove="@(MergedAssemblies)" />
			<LibDir Include="@(ReferenceCopyLocalDirs->Distinct())" />
		</ItemGroup>
		<PropertyGroup>
			<ILMergeArgs Condition="'$(AssemblyOriginatorKeyFile)' != ''">/keyfile:&quot;$(AssemblyOriginatorKeyFile)&quot;</ILMergeArgs>
		</PropertyGroup>
		<Exec Command="&quot;$(ILMerge)&quot; @(LibDir->'/lib:&quot;%(Identity).&quot;', ' ') $(ILMergeArgs) /targetplatform:&quot;v4,$(FullFrameworkReferenceAssemblyPaths.TrimEnd(\\))&quot; /out:&quot;@(IntermediateAssembly->'%(FullPath)')&quot; &quot;@(IntermediateAssembly->'%(FullPath)')&quot; @(MergedAssemblies->'&quot;%(FullPath)&quot;', ' ')"
			  WorkingDirectory="$(MSBuildProjectDirectory)\$(OutputPath)"
			  StandardErrorImportance="high"
			  StandardOutputImportance="low"
			  ConsoleToMSBuild="true"
			  ContinueOnError="true">
			<Output TaskParameter="ConsoleOutput" PropertyName="ILMergeOutput"/>
			<Output TaskParameter="ExitCode" PropertyName="ExitCode"/>
		</Exec>
		<Message Importance="high" Text="$(ILMergeOutput)" Condition="'$(ExitCode)' != '0'" />
		<Error Text="$(ILMergeOutput)" Condition="'$(ExitCode)' != '0' And '$(ContinueOnError)' != 'true'" />
		<Delete Files="@(MergedAssemblies -> '$(MSBuildProjectDirectory)\$(OutputPath)%(Filename)%(Extension)')" Condition="Exists('$(MSBuildProjectDirectory)\$(OutputPath)%(Filename)%(Extension)')" />
	</Target>

</Project>
