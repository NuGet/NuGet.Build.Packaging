<!--
***********************************************************************************************
Microsoft.NuGet.Build.Packaging.props

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

	<PropertyGroup>
		<IsPackagingProject Condition="'$(IsPackagingProject)' == '' and '$(MSBuildProjectExtension)' == '.nuproj'">true</IsPackagingProject>
	</PropertyGroup>

	<PropertyGroup>
		<ApiIntersectToolPath Condition=" '$(ApiIntersectTool)' == '' ">$(MSBuildThisFileDirectory)</ApiIntersectToolPath>
		<ApiIntersectToolExe Condition=" '$(ApiIntersectToolExe)' == '' ">ApiIntersect.exe</ApiIntersectToolExe>
	</PropertyGroup>

	<ItemDefinitionGroup>
		<PackageFile>
			<!-- See @(PackageItemKind) below -->
			<Kind>None</Kind>
			<!-- By default, we consider all PackageFile items to be explicitly added by the user
				 the automatic discovery will annotate those with Implicit instead. 
				 This allows the duplicate item detection to either warn (Implicit) or error (Explicit). -->
			<Source>Explicit</Source>
		</PackageFile>
		<PackageReference>
			<!-- See https://github.com/NuGet/Home/wiki/PackageReference-Specification -->
			<!-- A version range. See http://docs.nuget.org/ndocs/create-packages/dependency-versions#version-ranges -->
			<Version />
			<!-- When set to All, denotes a development dependency -->
			<PrivateAssets />
		</PackageReference>
	</ItemDefinitionGroup>

	<ItemGroup>
		<!-- Default mapping between %(PackageFile.Kind) metadata and package folders inside .nupkg -->
		<!-- PackageFolder should map to a supported folder as defined in PackagingConstants.Folders -->
		<PackageItemKind Include="Content">
			<!-- Plain "content" is deprecated as of NuGet v3+ -->
			<PackageFolder>contentFiles</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="None">
			<!-- Causes the file to end up in the package root dir -->
			<PackageFolder></PackageFolder>
		</PackageItemKind>

		<!-- NOTE: these aren't strictly necessary since we turn any custom 
			 Kind metadata into a PackageFolder by making the first char lowercase
		-->
		<PackageItemKind Include="Lib">
			<PackageFolder>lib</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Build">
			<PackageFolder>build</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Tools">
			<PackageFolder>tools</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="ContentFiles">
			<PackageFolder>contentFiles</PackageFolder>
			<!-- See https://docs.nuget.org/ndocs/schema/nuspec#using-the-contentfiles-element-for-content-files
			Additional optional metadata for ContentFiles:
				* CodeLanguage: any (default), cs, fs, vb 
				* BuildAction: Compile (default), None, EmbeddedResource
				* CopyToOutput: false (default) / true 
				* Flatten: false (default) / true 
			-->
		</PackageItemKind>
		<PackageItemKind Include="Native">
			<PackageFolder>native</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Runtimes">
			<PackageFolder>runtimes</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Ref">
			<PackageFolder>ref</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Analyzers">
			<PackageFolder>analyzers</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Source">
			<PackageFolder>source</PackageFolder>
		</PackageItemKind>

		<!-- Special-case singular form of the built-in plural form folders. -->
		<PackageItemKind Include="Tool">
			<PackageFolder>tools</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Runtime">
			<PackageFolder>runtimes</PackageFolder>
		</PackageItemKind>
		<PackageItemKind Include="Analyzer">
			<PackageFolder>analyzers</PackageFolder>
		</PackageItemKind>

		<!-- For unknown Kind we apply the heuristics of turning the metadata value into pascalCase 
             and using that as the package folder (i.e. 'Workbooks' -> 'workbooks') -->

		<!-- Finally, specially treated items that we include here for completeness and documentation -->

		<!-- PackageReference items end up as Dependency -->
		<!-- Project references that build packages also end up as package dependencies -->
		<PackageItemKind Include="Dependency">
			<!-- See https://github.com/NuGet/Home/wiki/PackageReference-Specification for the available metadata -->
		</PackageItemKind>

		<!-- The package metadata item if the project generates a package -->
		<PackageItemKind Include="Metadata" />

		<!-- Platform targets could turn @(ReferencePath) with ResolvedFrom={TargetFrameworkDirectory} to FrameworkReference, for example -->
		<PackageItemKind Include="FrameworkReference" />

	</ItemGroup>

	<PropertyGroup>
		<!-- Flag this project as having been "nugetized" -->
		<IsNuGetized>true</IsNuGetized>
		<NuGetBuildPackagingPropsImported>true</NuGetBuildPackagingPropsImported>
	</PropertyGroup>

	<Import Project="NuGet.Build.Packaging.Version.props" />
	<Import Project="NuGet.Build.Packaging.Authoring.props" Condition="'$(IsPackagingProject)' == 'true'" />
</Project>
