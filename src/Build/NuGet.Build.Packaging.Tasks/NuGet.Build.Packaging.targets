<!--
***********************************************************************************************
Microsoft.NuGet.Build.Packaging.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.AssignPackagePath" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.CreatePackage" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ReadLegacyJsonDependencies" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ReadLegacyConfigDependencies" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />

	<Import Project="NuGet.Build.Packaging.props" Condition="'$(NuGetBuildPackagingPropsImported)' == ''" />

	<PropertyGroup>
		<!-- Infer PackageRererence elements from packages.config/project.json files in the project -->
		<InferLegacyPackageReferences Condition="'$(InferLegacyPackageReferences)' == ''">true</InferLegacyPackageReferences>
		<!-- Whether to include @(Content) items in the package -->
		<IncludeContentInPackage Condition="'$(IncludeContentInPackage)' == ''">true</IncludeContentInPackage>
		<!-- Whether to include @(BuiltProjectOutputGroupOutput), @(DocumentationProjectOutputGroupOutput) and @(SatelliteDllsProjectOutputGroupOutput) items in the package -->
		<IncludeOutputsInPackage Condition="'$(IncludeOutputsInPackage)' == ''">true</IncludeOutputsInPackage>
		<!-- Whether to include @(DebugSymbolsProjectOutputGroupOutput) items in the package -->
		<IncludeSymbolsInPackage Condition="'$(IncludeSymbolsInPackage)' == '' and '$(IncludeOutputsInPackage)' == 'true' and '$(Configuration)' == 'Debug'">true</IncludeSymbolsInPackage>
		<!-- Whether to include framework references (%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}') in the package -->
		<!-- Only default to true if the project isn't a nuget packaging project itself. -->
		<IncludeFrameworkReferencesInPackage Condition="'$(IncludeFrameworkReferencesInPackage)' == '' and '$(IsPackagingProject)' != 'true'">true</IncludeFrameworkReferencesInPackage>

		<PackageRequireLicenseAcceptance Condition="'$(PackageRequireLicenseAcceptance)' == ''">false</PackageRequireLicenseAcceptance>

		<!-- NOTE: we will always have this property in projects referencing this targets file. Can be used to detect this. -->
		<IsPackable Condition="'$(IsPackable)' == '' and '$(PackageId)' != ''">true</IsPackable>
		<IsPackable Condition="'$(IsPackable)' == '' and '$(PackageId)' == ''">false</IsPackable>
		<!-- When the project is building a package, AssignPackagePath always assigns a PackagePath, regardless of the project PackageId -->
		<BuildingPackage Condition="'$(BuildingPackage)' == '' and '$(IsPackagingProject)' == 'true'">true</BuildingPackage>

		<!-- Directory where the .nupkg will be saved to if Pack is run, used also in GetPackageTargetPath -->
		<PackageOutputPath Condition="'$(PackageOutputPath)' == ''">$(OutputPath)</PackageOutputPath>

		<PackOnBuildFile>$(MSBuildProjectDirectory)\.packonbuild</PackOnBuildFile>
	</PropertyGroup>

	<ItemGroup>
		<ProjectCapability Include="Packable" Condition="'$(IsPackable)' == 'true'"/>
	</ItemGroup>

	<!-- Extends the built-in GetTargetPath output to signal that the project has been nugetized -->
	<ItemDefinitionGroup>
		<TargetPathWithTargetPlatformMoniker>
			<IsPackable>$(IsPackable)</IsPackable>
		</TargetPathWithTargetPlatformMoniker>
	</ItemDefinitionGroup>

	<!--
	============================================================
					GetPackageVersion

    This target sets the default $(PackageVersion) to $(Version) 
	if empty, and returns it. 
	
	It can be redefined to change how the package version is 
	determined.
	============================================================
	-->
	<PropertyGroup>
		<GetPackageVersionDependsOn>
			$(GetPackageVersionDependsOn);
			_SetDefaultPackageVersion
		</GetPackageVersionDependsOn>
	</PropertyGroup>
	<Target Name="GetPackageVersion" DependsOnTargets="$(GetPackageVersionDependsOn)" Returns="$(PackageVersion)" />
	<Target Name="_SetDefaultPackageVersion" Condition="'$(PackageVersion)' == ''" Returns="$(PackageVersion)">
		<PropertyGroup>
			<PackageVersion Condition=" '$(PackageVersion)' == '' ">$(Version)</PackageVersion>
		</PropertyGroup>
	</Target>

	<!--
	============================================================
					GetPackageTargetPath

    If the project builds a package (that is, it has a PackageId), 
    this target returns an item for the $(PackageTargetPath) that 
    the project builds, as well as manifest metadata included in 
    the project for the resulting package, not including its 
    contents and dependencies, which must be retrieved from the 
    GetPackageContents target instead.
   ============================================================
	-->
	<PropertyGroup>
		<GetPackageTargetPathDependsOn>
			$(GetPackageTargetPathDependsOn);
			GetPackageVersion;
			_SetDefaultPackageTargetPath;
		</GetPackageTargetPathDependsOn>
	</PropertyGroup>
	<Target Name="GetPackageTargetPath" Condition="'$(IsPackable)' == 'true'" DependsOnTargets="$(GetPackageTargetPathDependsOn)" Returns="@(PackageTargetPath)">
		<Error Text="The 'PackageVersion' property cannot be empty." Code="NG1002" Condition="'$(PackageVersion)' == ''" />
		<ItemGroup>
			<!-- Ensure we got a full path -->
			<PackageTargetPath Include="$([System.IO.Path]::GetFullPath('$(PackageTargetPath)'))">
				<Id>$(PackageId)</Id>
				<Version>$(PackageVersion)</Version>
				<DevelopmentDependency Condition="'$(IsDevelopmentDependency)' == 'true'">true</DevelopmentDependency>

				<Authors>$(Authors)</Authors>
				<Owners>$(Owners)</Owners>
				<Title>$(Title)</Title>
				<Description>$(Description)</Description>
				<Summary>$(Summary)</Summary>
				<Language>$(NeutralLanguage)</Language>
				<Copyright>$(Copyright)</Copyright>

				<RequireLicenseAcceptance>$(PackageRequireLicenseAcceptance)</RequireLicenseAcceptance>
				<LicenseUrl>$(PackageLicenseUrl)</LicenseUrl>
				<ProjectUrl>$(PackageProjectUrl)</ProjectUrl>
				<IconUrl>$(PackageIconUrl)</IconUrl>
				<Tags>$(PackageTags)</Tags>

				<ReleaseNotes>$(PackageReleaseNotes)</ReleaseNotes>
				<RepositoryUrl>$(RepositoryUrl)</RepositoryUrl>
				<RepositoryType>$(RepositoryType)</RepositoryType>
				<PackageTypes>$(PackageTypes)</PackageTypes>
			</PackageTargetPath>
		</ItemGroup>
	</Target>
	<Target Name="_SetDefaultPackageTargetPath" Condition="'$(IsPackable)' == 'true' and '$(PackageTargetPath)' == '' and '$(PackageVersion)' != ''">
		<PropertyGroup>
			<PackageTargetPath Condition="'$(PackageTargetPath)' == ''">$([System.IO.Path]::Combine('$(PackageOutputPath)', '$(PackageId).$(PackageVersion).nupkg'))</PackageTargetPath>
		</PropertyGroup>
	</Target>

	<!--
    ============================================================
						PackageOutputGroup
    ============================================================
    -->
	<PropertyGroup>
		<PackageOutputGroupDependsOn>GetPackageTargetPath;$(PackageOutputGroupDependsOn)</PackageOutputGroupDependsOn>
	</PropertyGroup>
	<Target Name="PackageOutputGroup" BeforeTargets="AllProjectOutputGroups" Returns="@(PackageTargetPath)" DependsOnTargets="$(PackageOutputGroupDependsOn)" />

	<!--
	============================================================
					GetPackageContents

    Returns the "virtual package" for the current project, containing 
	all items that would end up in a .nupkg if the project were 
	to be packed. 
	
	If the project has NuGet metadata to generate a .nupkg, a metadata 
	item containing the manifest information will also be returned, as 
	
		Identity=$(PackageId)
		   %(Kind)=Metadata
		   ... all manifest values as metadata items ...
	
	All items returned from this target contain a %(PackageId) metadata 
	with the project's $(PackageId), if any.
	============================================================
	-->
	<PropertyGroup>
		<!-- Only depend on ResolveReferences if we need to include framework references -->
		<GetPackageContentsDependsOn Condition="'$(IncludeFrameworkReferencesInPackage)' == 'true'">
			ResolveReferences
		</GetPackageContentsDependsOn>
		<GetPackageContentsDependsOn>
			$(GetPackageContentsDependsOn);
			GetPackageTargetPath;
			AssignProjectConfiguration;
			_SplitProjectReferencesByFileExistence;
			_SplitProjectReferencesByIsPackablePresence;
			AllProjectOutputGroups;
			ReadLegacyDependencies;
		</GetPackageContentsDependsOn>
		<!-- Only collect referenced projects' outputs if we need to include them -->
		<GetPackageContentsDependsOn Condition="'$(IncludeOutputsInPackage)' == 'true'">
			$(GetPackageContentsDependsOn)
			_CollectMissingIsPackableProjectReferencesOutputs;
		</GetPackageContentsDependsOn>
	</PropertyGroup>
	<Target Name="GetPackageContents" DependsOnTargets="$(GetPackageContentsDependsOn)" Returns="@(_PackageContent)">

		<!-- PackageId metadata on all PackageFile items means we can tell appart which ones came from which dependencies 
			 NOTE: if PackageId is empty, we won't generate a manifest and it means the files need to be packed with the
			 current project. -->
		<ItemGroup>
			<PackageFile Include="@(BuiltProjectOutputGroupOutput -> '%(FinalOutputPath)')"
                         Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary output -->
				<Kind>Lib</Kind>
			</PackageFile>

			<!-- Remove when https://github.com/Microsoft/msbuild/pull/1076 ships -->
			<_DocumentationProjectOutputGroupOutput Include="@(DocumentationProjectOutputGroupOutput)"
													Condition="'$(IncludeOutputsInPackage)' == 'true'">
				<FinalOutputPath Condition="$([System.IO.Path]::IsPathRooted('%(FinalOutputPath)')) == 'false'">$(MSBuildProjectDirectory)\%(FinalOutputPath)</FinalOutputPath>
			</_DocumentationProjectOutputGroupOutput>
			<PackageFile Include="@(_DocumentationProjectOutputGroupOutput -> '%(FinalOutputPath)')"
                         Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary docs -->
				<Kind>Doc</Kind>
			</PackageFile>

			<PackageFile Include="@(DebugSymbolsProjectOutputGroupOutput -> '%(FinalOutputPath)')"
                         Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IncludeSymbolsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary symbols -->
				<Kind>Symbols</Kind>
			</PackageFile>

			<!-- Change to %(FinalOutputPath) when https://github.com/Microsoft/msbuild/pull/1115 ships -->
			<PackageFile Include="@(SatelliteDllsProjectOutputGroupOutput -> '%(FullPath)')"
						 Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute satellite dlls -->
				<Kind>Lib</Kind>
			</PackageFile>

			<!-- NOTE: Content is opt-out (must have IncludeInPackage=false to exclude) -->
			<!-- @ContentFilesProjectOutputGroupOutput = @(ContentWithTargetPath->'%(FullPath)') -->
			<PackageFile Include="@(ContentFilesProjectOutputGroupOutput)"
						 Condition="'$(IncludeContentInPackage)' == 'true' and '%(ContentFilesProjectOutputGroupOutput.IncludeInPackage)' != 'false'">
				<Kind>Content</Kind>
			</PackageFile>

			<!-- NOTE: None is opt-in (must have IncludeInPackage=true to include) -->
			<PackageFile Include="@(_NoneWithTargetPath)"
						 Condition="'%(_NoneWithTargetPath.IncludeInPackage)' == 'true'">
				<Kind>None</Kind>
			</PackageFile>

			<PackageFile Include="@(PackageReference)">
				<Kind>Dependency</Kind>
			</PackageFile>

			<!-- We can't use %(FrameworkFile)==true because it's not defined for raw file references and 
			     it also includes mscorlib which we don't need
			     TBD: maybe include ResolvedFrom=ImplicitlyExpandDesignTimeFacades too? -->
			<PackageFile Include="@(ReferencePath->'%(OriginalItemSpec)')"
						 Condition="'$(IncludeFrameworkReferencesInPackage)' == 'true' and '%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}'">
				<Kind>FrameworkReference</Kind>
			</PackageFile>
		</ItemGroup>

		<!-- If packaging the project, provide the metadata as a non-file item -->
		<ItemGroup Condition="'$(PackageId)' != ''">
			<PackageFile Include="@(PackageTargetPath->'%(Id)')">
				<Kind>Metadata</Kind>
			</PackageFile>
		</ItemGroup>

		<ItemGroup>
			<PackageFile>
				<PackageId>$(PackageId)</PackageId>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' != 'true'">$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<AssignPackagePath Files="@(PackageFile)" Kinds="@(PackageItemKind)">
			<Output TaskParameter="AssignedFiles" ItemName="_PackageContent" />
		</AssignPackagePath>

		<MSBuild Projects="@(_IsPackableProject)"
				 Targets="GetPackageContents"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_IsPackableProject.SetConfiguration); %(_IsPackableProject.SetPlatform); BuildingPackage=$(BuildingPackage)"
				 Condition="'@(ProjectReferenceWithConfiguration)' != '' and '@(_IsPackableProject)' != ''"
				 RemoveProperties="%(_IsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedPackageContent" />
		</MSBuild>

		<ItemGroup>
			<_ReferencedPackageDependency Include="@(_ReferencedPackageContent)"
										  Condition="'%(_ReferencedPackageContent.PackageId)' != '$(PackageId)' and '%(_ReferencedPackageContent.Kind)' == 'Metadata'">
				<!-- For consistency, annotate like the rest -->
				<PackageId>$(PackageId)</PackageId>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' != 'true'">$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
				<Kind>Dependency</Kind>
			</_ReferencedPackageDependency>
			<!-- Remove the referenced package actual contents if it provides a manifest, since it will be a dependency in that case. -->
			<_PackageContentFromDependency Include="@(_ReferencedPackageContent)"
										   Condition="'%(_ReferencedPackageContent.PackageId)' != '' and 
										              '%(_ReferencedPackageContent.PackageId)' != '$(PackageId)'" />
			<_ReferencedPackageContent Remove="@(_PackageContentFromDependency)" />
		</ItemGroup>

		<!-- Always annotate package contents with the original target framework and moniker -->
		<CreateItem Include="@(_ReferencedPackageContent)" PreserveExistingMetadata="true"
					Condition="'@(_ReferencedPackageContent)' != ''"
					AdditionalMetadata="OriginalTargetFramework=%(TargetFramework);OriginalTargetFrameworkMoniker=%(TargetFrameworkMoniker)">
			<Output TaskParameter="Include" ItemName="_ReferencedPackageContentWithOriginalValues"/>
		</CreateItem>

		<ItemGroup Condition="'$(IsPackagingProject)' != 'true'">
			<!-- Retarget content for the currently building package, if necessary -->
			<_ReferencedPackageContentWithOriginalValues Condition="'%(_ReferencedPackageContentWithOriginalValues.PackageId)' == ''">
				<PackageId>$(PackageId)</PackageId>
				<!-- Clear the target framework since it trumps the TFM in AsignPackagePath now -->
				<!-- Only do this for Library assets that come from project references that don't build nugets (PackageId=='' above) -->
				<TargetFramework Condition="'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Lib' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Library' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Symbols' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Doc'"></TargetFramework>
				<!-- NOTE: we're always overwriting the TFM in this case since 
					 this item will end up making up the contents of this package 
					 project in its current TFM configuration. 
					 TBD: we might want to preserve it anyways and adjust later 
					 (i.e. net45 project references netstandard1.6 project)
					 TODO: take into account multi-targetting.
				-->
				<TargetFrameworkMoniker>$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</_ReferencedPackageContentWithOriginalValues>
		</ItemGroup>
		<!-- Otherwise, assign target paths based on the original TFM -->
		<ItemGroup Condition="'$(IsPackagingProject)' == 'true'">
			<!-- Retarget content for the currently building package, if necessary -->
			<_ReferencedPackageContentWithOriginalValues Condition="'%(_ReferencedPackageContentWithOriginalValues.PackageId)' == ''">
				<PackageId>$(PackageId)</PackageId>
				<!-- Clear the target framework since it trumps the TFM in AsignPackagePath now -->
				<!-- Only do this for Library assets that come from project references that don't build nugets (PackageId=='' above) -->
				<TargetFramework Condition="'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Lib' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Library' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Symbols' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Doc'"></TargetFramework>
				<TargetFrameworkMoniker>%(OriginalTargetFrameworkMoniker)</TargetFrameworkMoniker>
			</_ReferencedPackageContentWithOriginalValues>
		</ItemGroup>

		<!-- Ensure referenced package content gets assigned a package path if it didn't provide one already.
			 This happens for project references' that don't have a PackageId, since their package path will 
			 depend on the referencing project's TFM.
		-->
		<AssignPackagePath Files="@(_ReferencedPackageContentWithOriginalValues);@(_ReferencedPackageDependency)"
						   Kinds="@(PackageItemKind)"
						   IsPackaging="$(BuildingPackage)"
						   Condition="'@(_ReferencedPackageContentWithOriginalValues)' != '' Or '@(_ReferencedPackageDependency)' != ''">
			<Output TaskParameter="AssignedFiles" ItemName="_PackageContent" />
		</AssignPackagePath>
	</Target>

	<!-- This target separates project references that have the packaging targets from those that don't -->
	<Target Name="_SplitProjectReferencesByIsPackablePresence"
			Condition="'@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''"
			Inputs="@(_MSBuildProjectReferenceExistent)"
			Outputs="%(_MSBuildProjectReferenceExistent.Identity)-BATCH">
		<MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
					 Targets="GetTargetPath"
					 BuildInParallel="$(BuildInParallel)"
					 Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
					 RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectTargetPath" />
		</MSBuild>

		<PropertyGroup>
			<_HasIsPackable Condition="'%(_ReferencedProjectTargetPath.IsPackable)' != ''">true</_HasIsPackable>
		</PropertyGroup>

		<ItemGroup>
			<_NoIsPackableProject Include="@(_MSBuildProjectReferenceExistent)" Condition="'$(_HasIsPackable)' != 'true'" />
			<_IsPackableProject Include="@(_MSBuildProjectReferenceExistent)" Condition="'$(_HasIsPackable)' == 'true'" />
		</ItemGroup>

	</Target>

	<!-- Includes primary output and dependencies for non-nugetized projects -->
	<Target Name="_CollectMissingIsPackableProjectReferencesOutputs"
			Inputs="@(_NoIsPackableProject)"
			Outputs="%(_NoIsPackableProject.Identity)-BATCH"
			Condition="'@(_NoIsPackableProject)' != ''">
		<Warning Text="@(_NoIsPackableProject) does not have the 'NuGet.Build.Packaging' package installed. Only primary output will be packaged."
				 Code="NG1001" />

		<!-- Get TFM if the project is a packaging project, since we want to use the original project's TFM in that case -->
		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="GetTargetFrameworkMoniker"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)"
				 Condition="'$(IsPackagingProject)' == 'true'">
			<Output TaskParameter="TargetOutputs" PropertyName="_ReferencedProjectTFM" />
		</MSBuild>


		<!-- Main project and dependencies built output -->
		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="BuiltProjectOutputGroup"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectBuiltOutput" />
		</MSBuild>

		<ItemGroup>
			<PackageFile Include="@(_ReferencedProjectBuiltOutput -> '%(FinalOutputPath)')">
				<Kind>Lib</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="BuiltProjectOutputGroupDependencies"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectOutputDependency" />
		</MSBuild>

		<ItemGroup>
			<!-- NOTE: this default heuristics does not include assemblies referenced from nuget v3 packages which look like the following:
					BuiltProjectOutputGroupDependency: %UserProfile%\.nuget\packages\Newtonsoft.Json\6.0.4\lib\net45\Newtonsoft.Json.dll
						CopyLocal=false
						NuGetIsFrameworkReference=false
						NuGetPackageId=Newtonsoft.Json
						NuGetPackageVersion=6.0.4
						NuGetSourceType=Package
						ResolvedFrom={RawFileName}
						
				Since the dependencies include the actual closure of all transitive nuget package dependencies (from its 
				lock.json or packages.config), we can't rely on these to provide the top-level dependencies we actually 
				need either.
			-->
			<PackageFile Include="@(_ReferencedProjectOutputDependency -> '%(FullPath)')"
						 Condition="'%(_ReferencedProjectOutputDependency.CopyLocal)' == 'true' and
						            '%(_ReferencedProjectOutputDependency.FrameworkFile)' != 'true' and 
									'%(_ReferencedProjectOutputDependency.ResolvedFrom)' != '{TargetFrameworkDirectory}'">
				<Kind>Lib</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<!-- Main project and dependencies symbols -->
		<MSBuild Projects="@(_NoIsPackableProject)"
				 Condition="'$(IncludeSymbolsInPackage)' == 'true'"
				 Targets="DebugSymbolsProjectOutputGroup"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectDebugSymbols" />
		</MSBuild>

		<ItemGroup>
			<PackageFile Include="@(_ReferencedProjectDebugSymbols -> '%(FinalOutputPath)')">
				<Kind>Symbols</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<MSBuild Projects="@(_NoIsPackableProject)"
				 Condition="'$(IncludeSymbolsInPackage)' == 'true'"
				 Targets="DebugSymbolsProjectOutputGroupDependencies"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectOutputDependencySymbols" />
		</MSBuild>

		<ItemGroup>
			<PackageFile Include="@(_ReferencedProjectOutputDependencySymbols -> '%(FullPath)')"
						 Condition="'%(_ReferencedProjectOutputDependencySymbols.CopyLocal)' == 'true'">
				<Kind>Symbols</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<!-- Main project and dependencies documentation -->
		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="DocumentationProjectOutputGroup"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectDocumentation" />
		</MSBuild>

		<ItemGroup Condition="'@(_ReferencedProjectDocumentation)' != ''">
			<!-- Ensure FinalOutputPath is a full path. Remove when https://github.com/Microsoft/msbuild/pull/1076 ships -->
			<_ReferencedProjectDocumentationFullPath Include="@(_ReferencedProjectDocumentation)" Condition="$([System.IO.Path]::IsPathRooted('%(_ReferencedProjectDocumentation.FinalOutputPath)')) == 'true'">
				<FinalFullOutputPath>%(_ReferencedProjectDocumentation.FinalOutputPath)</FinalFullOutputPath>
			</_ReferencedProjectDocumentationFullPath>
			<_ReferencedProjectDocumentationFullPath Include="@(_ReferencedProjectDocumentation)" Condition="$([System.IO.Path]::IsPathRooted('%(_ReferencedProjectDocumentation.FinalOutputPath)')) == 'false'">
				<FinalFullOutputPath Condition="$([System.IO.Path]::IsPathRooted('%(_ReferencedProjectDocumentation.FinalOutputPath)')) == 'false'">$([System.IO.Path]::GetDirectoryName('%(_ReferencedProjectDocumentation.MSBuildSourceProjectFile)'))\%(_ReferencedProjectDocumentation.FinalOutputPath)</FinalFullOutputPath>
			</_ReferencedProjectDocumentationFullPath>
			<PackageFile Include="@(_ReferencedProjectDocumentationFullPath -> '%(FinalFullOutputPath)')">
				<Kind>Doc</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="DocumentationProjectOutputGroupDependencies"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectDocumentationDependency" />
		</MSBuild>

		<ItemGroup Condition="'@(_ReferencedProjectDocumentationDependency)' != ''">
			<PackageFile Include="@(_ReferencedProjectDocumentationDependency -> '%(FullPath)')"
						 Condition="'%(_ReferencedProjectDocumentationDependency.CopyLocal)' == 'true'">
				<Kind>Doc</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<!-- Main project and dependencies satellite assemblies -->
		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="SatelliteDllsProjectOutputGroup"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectSatelliteDll" />
		</MSBuild>

		<ItemGroup Condition="'@(_ReferencedProjectSatelliteDll)' != ''">
			<!-- Change to %(FinalOutputPath) when https://github.com/Microsoft/msbuild/pull/1115 ships -->
			<PackageFile Include="@(_ReferencedProjectSatelliteDll -> '%(FullPath)')">
				<Kind>Lib</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<MSBuild Projects="@(_NoIsPackableProject)"
				 Targets="SatelliteDllsProjectOutputGroupDependencies"
				 BuildInParallel="$(BuildInParallel)"
				 Properties="%(_NoIsPackableProject.SetConfiguration); %(_NoIsPackableProject.SetPlatform)"
				 RemoveProperties="%(_NoIsPackableProject.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectDependencySatelliteDll" />
		</MSBuild>

		<ItemGroup Condition="'@(_ReferencedProjectDependencySatelliteDll)' != ''">
			<!-- Change to %(FinalOutputPath) when https://github.com/Microsoft/msbuild/pull/1115 ships -->
			<PackageFile Include="@(_ReferencedProjectDependencySatelliteDll -> '%(FullPath)')"
						 Condition="'%(_ReferencedProjectDependencySatelliteDll.CopyLocal)' == 'true'">
				<Kind>Lib</Kind>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' == 'true'">$(_ReferencedProjectTFM)</TargetFrameworkMoniker>
				<TargetPath Condition="'%(_ReferencedProjectDependencySatelliteDll.DestinationSubDirectory)' != ''">%(_ReferencedProjectDependencySatelliteDll.DestinationSubDirectory)%(_ReferencedProjectDependencySatelliteDll.Filename)%(_ReferencedProjectDependencySatelliteDll.Extension)</TargetPath>
			</PackageFile>
		</ItemGroup>

	</Target>

	<Target Name="ReadLegacyDependencies" Condition="'$(InferLegacyPackageReferences)' == 'true'">
		<PropertyGroup>
			<_ProjectJson>$(MSBuildProjectDirectory)\project.json</_ProjectJson>
			<_PackagesConfig>$(MSBuildProjectDirectory)\packages.config</_PackagesConfig>
		</PropertyGroup>
		
		<ReadLegacyJsonDependencies ProjectJsonPath="$(_ProjectJson)" Condition="Exists('$(_ProjectJson)')">
			<Output TaskParameter="PackageReferences" ItemName="PackageReference" />
		</ReadLegacyJsonDependencies>

		<ReadLegacyConfigDependencies PackagesConfigPath="$(_PackagesConfig)" Condition="Exists('$(_PackagesConfig)')">
			<Output TaskParameter="PackageReferences" ItemName="PackageReference" />
		</ReadLegacyConfigDependencies>
	</Target>
	
	<PropertyGroup>
		<BuildDependsOn Condition="('$(PackOnBuild)' == 'true' Or Exists('$(PackOnBuildFile)')) and '$(IsPackable)' == 'true'">
			$(BuildDependsOn);
			Pack;
		</BuildDependsOn>
		<PackDependsOn Condition="'$(IsPackagingProject)' != 'true'">
			CoreBuild;
		</PackDependsOn>
		<PackDependsOn>
			$(PackDependsOn)
			GetPackageTargetPath;
			GetPackageContents;
		</PackDependsOn>
	</PropertyGroup>

	<!--
	============================================================
					Pack

    Creates the output .nupkg if the project is packable.
	============================================================
	-->
	<Target Name="Pack" DependsOnTargets="$(PackDependsOn)" Returns="@(PackageTargetPath)" Condition="'$(IsPackable)' == 'true'">
		<CreatePackage Manifest="@(PackageTargetPath)" Contents="@(_PackageContent)" TargetPath="@(PackageTargetPath->'%(FullPath)')">
			<Output TaskParameter="OutputPackage" ItemName="_PackageTargetPath" />
			<Output TaskParameter="OutputPackage" ItemName="FileWrites" />
		</CreatePackage>

		<Message Importance="high" Text="Created package at %(_PackageTargetPath.FullPath)." />
	</Target>

	<Import Project="NuGet.Build.Packaging.Authoring.targets" Condition="'$(IsPackagingProject)' == 'true'" />
</Project>
