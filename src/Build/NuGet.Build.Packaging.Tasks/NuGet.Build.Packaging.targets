<!--
***********************************************************************************************
Microsoft.NuGet.Build.Packaging.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.AssignPackagePath" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.CreatePackage" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ReadLegacyJsonDependencies" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ReadLegacyConfigDependencies" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ApiIntersect" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.GenerateAssemblyInfo" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.GetApiIntersectTargetPaths" AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />

	<Import Project="NuGet.Build.Packaging.props" Condition="'$(NuGetBuildPackagingPropsImported)' == ''" />

	<PropertyGroup>
		<!-- The Kind of primary output (build, symbols and doc) set if IncludeOutputsInPackage = true -->
		<PrimaryOutputPackageFileKind Condition="'$(PrimaryOutputPackageFileKind)' == ''">Lib</PrimaryOutputPackageFileKind>

		<!-- Infer PackageRererence elements from packages.config/project.json files in the project -->
		<InferLegacyPackageReferences Condition="'$(InferLegacyPackageReferences)' == ''">true</InferLegacyPackageReferences>
		<!-- Whether to include @(Content) items in the package -->
		<IncludeContentInPackage Condition="'$(IncludeContentInPackage)' == ''">true</IncludeContentInPackage>
		<!-- Whether to include @(BuiltProjectOutputGroupOutput), @(DocumentationProjectOutputGroupOutput) and @(SatelliteDllsProjectOutputGroupOutput) items in the package -->
		<IncludeOutputsInPackage Condition="'$(IncludeOutputsInPackage)' == ''">true</IncludeOutputsInPackage>
		<!-- Whether to include @(DebugSymbolsProjectOutputGroupOutput) items in the package -->
		<IncludeSymbolsInPackage Condition="'$(IncludeSymbolsInPackage)' == '' and '$(IncludeOutputsInPackage)' == 'true' and '$(Configuration)' == 'Debug'">true</IncludeSymbolsInPackage>
		<!-- Whether to include framework references (%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}') in the package -->
		<!-- Only default to true if the project isn't a nuget packaging project itself. -->
		<IncludeFrameworkReferencesInPackage Condition="'$(IncludeFrameworkReferencesInPackage)' == '' and '$(IsPackagingProject)' != 'true'">true</IncludeFrameworkReferencesInPackage>

		<PackageRequireLicenseAcceptance Condition="'$(PackageRequireLicenseAcceptance)' == ''">false</PackageRequireLicenseAcceptance>

		<!-- NOTE: we will always have this property in projects referencing this targets file. Can be used to detect this. -->
		<IsPackable Condition="'$(IsPackable)' == '' and '$(PackageId)' != ''">true</IsPackable>
		<IsPackable Condition="'$(IsPackable)' == '' and '$(PackageId)' == ''">false</IsPackable>
		<!-- When the project is building a package, AssignPackagePath always assigns a PackagePath, regardless of the project PackageId -->
		<BuildingPackage Condition="'$(BuildingPackage)' == '' and '$(IsPackagingProject)' == 'true'">true</BuildingPackage>

		<!-- Directory where the .nupkg will be saved to if Pack is run, used also in GetPackageTargetPath -->
		<PackageOutputPath Condition="'$(PackageOutputPath)' == ''">$(OutputPath)</PackageOutputPath>

		<PackOnBuildFile>$(MSBuildProjectDirectory)\.packonbuild</PackOnBuildFile>
	</PropertyGroup>

	<ItemGroup>
		<ProjectCapability Include="Packable" Condition="'$(IsPackable)' == 'true'"/>

		<!-- Converts potentially multiple $(ReferenceAssemblyFrameworks) into @(ReferenceAssemblyFramework) -->
		<ReferenceAssemblyFramework Include="$(ReferenceAssemblyFrameworks)" Condition="'$(ReferenceAssemblyFrameworks)' != ''" />
	</ItemGroup>

	<!-- Extends the built-in GetTargetPathWithTargetPlatformMoniker output to signal that the project has been nugetized -->
	<ItemDefinitionGroup>
		<TargetPathWithTargetPlatformMoniker>
			<IsPackable>$(IsPackable)</IsPackable>
			<IsNuGetized>$(IsNuGetized)</IsNuGetized>
		</TargetPathWithTargetPlatformMoniker>
	</ItemDefinitionGroup>

	<!--
	=================================================================================================
	GetPackageVersion
	=================================================================================================

	This target sets the default $(PackageVersion) to $(Version) if empty, and returns it. 
	The $(Version) property is the upcoming default way .NET projects are versioned. See 
	https://github.com/dotnet/sdk/blob/master/src/Tasks/Microsoft.NET.Build.Tasks/build/Microsoft.NET.GenerateAssemblyInfo.targets#L108
	
	It can be redefined to change how the package version is 
	determined.
	
	OUTPUTS:
		$(PackageVersion)            The determined package version
	
    =================================================================================================
	-->
	<PropertyGroup>
		<GetPackageVersionDependsOn>
			$(GetPackageVersionDependsOn);
			_SetDefaultPackageVersion
		</GetPackageVersionDependsOn>
	</PropertyGroup>
	<Target Name="GetPackageVersion" DependsOnTargets="$(GetPackageVersionDependsOn)" Returns="$(PackageVersion)" />
	<Target Name="_SetDefaultPackageVersion" Condition="'$(PackageVersion)' == ''" Returns="$(PackageVersion)">
		<PropertyGroup>
			<PackageVersion Condition=" '$(PackageVersion)' == '' ">$(Version)</PackageVersion>
		</PropertyGroup>
	</Target>

	<!--
    =================================================================================================
	GetPackageTargetPath
    =================================================================================================

    If the project builds a package (that is, it has a PackageId), 
    this target returns an item for the $(PackageTargetPath) that 
    the project builds, as well as manifest metadata included in 
    the project for the resulting package, not including its 
    contents and dependencies, which must be retrieved from the 
    GetPackageContents target instead.
	
    OUTPUTS:
        @(PackageTargetPath)            The metadata of the package that would be built.
    =================================================================================================
	-->
	<PropertyGroup>
		<GetPackageTargetPathDependsOn>
			$(GetPackageTargetPathDependsOn);
			GetPackageVersion;
			_SetDefaultPackageTargetPath;
		</GetPackageTargetPathDependsOn>
	</PropertyGroup>
	<Target Name="GetPackageTargetPath" Condition="'$(IsPackable)' == 'true'" DependsOnTargets="$(GetPackageTargetPathDependsOn)" Returns="@(PackageTargetPath)">
		<Error Text="The 'PackageVersion' property cannot be empty." Code="NG1002" Condition="'$(PackageVersion)' == ''" />
		<ItemGroup>
			<!-- Ensure we got a full path -->
			<PackageTargetPath Include="$([System.IO.Path]::GetFullPath('$(PackageTargetPath)'))">
				<Id>$(PackageId)</Id>
				<Version>$(PackageVersion)</Version>
				<DevelopmentDependency Condition="'$(IsDevelopmentDependency)' == 'true'">true</DevelopmentDependency>

				<Authors>$(Authors)</Authors>
				<Owners>$(Owners)</Owners>
				<Title>$(Title)</Title>
				<Description>$(Description)</Description>
				<Summary>$(Summary)</Summary>
				<Language>$(NeutralLanguage)</Language>
				<Copyright>$(Copyright)</Copyright>

				<RequireLicenseAcceptance>$(PackageRequireLicenseAcceptance)</RequireLicenseAcceptance>
				<LicenseUrl>$(PackageLicenseUrl)</LicenseUrl>
				<ProjectUrl>$(PackageProjectUrl)</ProjectUrl>
				<IconUrl>$(PackageIconUrl)</IconUrl>
				<Tags>$(PackageTags)</Tags>

				<ReleaseNotes>$(PackageReleaseNotes)</ReleaseNotes>
				<RepositoryUrl>$(RepositoryUrl)</RepositoryUrl>
				<RepositoryType>$(RepositoryType)</RepositoryType>
				<PackageTypes>$(PackageTypes)</PackageTypes>
			</PackageTargetPath>
		</ItemGroup>
	</Target>
	<Target Name="_SetDefaultPackageTargetPath" Condition="'$(IsPackable)' == 'true' and '$(PackageTargetPath)' == '' and '$(PackageVersion)' != ''">
		<PropertyGroup>
			<PackageTargetPath Condition="'$(PackageTargetPath)' == ''">$([System.IO.Path]::Combine('$(PackageOutputPath)', '$(PackageId).$(PackageVersion).nupkg'))</PackageTargetPath>
		</PropertyGroup>
	</Target>

	<!--
    =================================================================================================
	PackageOutputGroup
    =================================================================================================
	
	For compatibility and naming consistency with the targets in AllProjectOutputGroups, this target 
	returns the same output as GetPackageTargetPath
	
    OUTPUTS:
        @(PackageTargetPath)            The metadata of the package that would be built.	
    =================================================================================================
    -->
	<PropertyGroup>
		<PackageOutputGroupDependsOn>GetPackageTargetPath;$(PackageOutputGroupDependsOn)</PackageOutputGroupDependsOn>
	</PropertyGroup>
	<Target Name="PackageOutputGroup" BeforeTargets="AllProjectOutputGroups" Returns="@(PackageTargetPath)" DependsOnTargets="$(PackageOutputGroupDependsOn)" />

	<!--
    =================================================================================================
	GetPackageContents
    =================================================================================================

    Returns the "virtual package" for the current project, containing 
	all items that would end up in a .nupkg if the project were 
	to be packed. 
	
	If the project has NuGet metadata to generate a .nupkg, a metadata 
	item containing the manifest information will also be returned, as 
	
		Identity=$(PackageId)
		   %(Kind)=Metadata
		   ... all manifest values as metadata items ...
	
	All items returned from this target contain a %(PackageId) metadata 
	with the project's $(PackageId), if any.
	
    OUTPUTS:
        @(_PackageContent)            The contents that this project contributes to a package
    =================================================================================================
	-->
	<PropertyGroup>
		<!-- Only depend on ResolveReferences if we need to include framework references -->
		<GetPackageContentsDependsOn Condition="'$(IncludeFrameworkReferencesInPackage)' == 'true'">
			ResolveReferences
		</GetPackageContentsDependsOn>
		<GetPackageContentsDependsOn>
			$(GetPackageContentsDependsOn);
			GetPackageTargetPath;
			ReadLegacyDependencies;
		</GetPackageContentsDependsOn>
		<GetPackageContentsDependsOn Condition="'$(IncludeOutputsInPackage)' == 'true'">
			$(GetPackageContentsDependsOn)
			AssignProjectConfiguration;
			_SplitProjectReferencesByFileExistence;
			_SplitProjectReferencesByIsNuGetized;
			AllProjectOutputGroups;
			_GetReferenceAssemblyTargetPaths;
		</GetPackageContentsDependsOn>
	</PropertyGroup>
	<Target Name="GetPackageContents" DependsOnTargets="$(GetPackageContentsDependsOn)" Returns="@(_PackageContent)">
		<Error Condition="'@(_NonNuGetizedProjectReference)' != ''"
				   Code="NG0011"
				   Text="Some project references cannot be properly packaged. Please install the NuGet.Build.Packaging package on the following projects: @(_NonNuGetizedProjectReference)." />

		<!-- PackageId metadata on all PackageFile items means we can tell appart which ones came from which dependencies 
			 NOTE: if PackageId is empty, we won't generate a manifest and it means the files need to be packed with the
			 current project. -->

		<ItemGroup>
			<PackageFile Include="@(BuiltProjectOutputGroupOutput -> '%(FinalOutputPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary output -->
				<Kind>$(PrimaryOutputPackageFileKind)</Kind>
			</PackageFile>

			<!-- Remove when https://github.com/Microsoft/msbuild/pull/1076 ships -->
			<_DocumentationProjectOutputGroupOutput Include="@(DocumentationProjectOutputGroupOutput)"
														  Condition="'$(IncludeOutputsInPackage)' == 'true'">
				<FinalOutputPath Condition="$([System.IO.Path]::IsPathRooted('%(FinalOutputPath)')) == 'false'">$(MSBuildProjectDirectory)\%(FinalOutputPath)</FinalOutputPath>
			</_DocumentationProjectOutputGroupOutput>
			<PackageFile Include="@(_DocumentationProjectOutputGroupOutput -> '%(FinalOutputPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary docs -->
				<Kind>$(PrimaryOutputPackageFileKind)</Kind>
			</PackageFile>

			<PackageFile Include="@(DebugSymbolsProjectOutputGroupOutput -> '%(FinalOutputPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IncludeSymbolsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary symbols -->
				<Kind>$(PrimaryOutputPackageFileKind)</Kind>
			</PackageFile>

			<!-- Change to %(FinalOutputPath) when https://github.com/Microsoft/msbuild/pull/1115 ships -->
			<PackageFile Include="@(SatelliteDllsProjectOutputGroupOutput -> '%(FullPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute satellite dlls -->
				<Kind>$(PrimaryOutputPackageFileKind)</Kind>
			</PackageFile>

			<!-- NOTE: Content is opt-out (must have IncludeInPackage=false to exclude) -->
			<!-- @ContentFilesProjectOutputGroupOutput = @(ContentWithTargetPath -> '%(FullPath)') -->
			<PackageFile Include="@(ContentWithTargetPath->'%(FullPath)')"
							   Condition="'$(IncludeContentInPackage)' == 'true' and '%(ContentWithTargetPath.IncludeInPackage)' != 'false'">
				<Kind>Content</Kind>
			</PackageFile>

			<!-- NOTE: None is opt-in (must have IncludeInPackage=true to include) -->
			<PackageFile Include="@(_NoneWithTargetPath)"
							   Condition="'%(_NoneWithTargetPath.IncludeInPackage)' == 'true'">
				<Kind>None</Kind>
			</PackageFile>

			<PackageFile Include="@(PackageReference)">
				<Kind>Dependency</Kind>
			</PackageFile>

			<!-- We can't use %(FrameworkFile)==true because it's not defined for raw file references and 
			     it also includes mscorlib which we don't need
			     TBD: maybe include ResolvedFrom=ImplicitlyExpandDesignTimeFacades too? -->
			<PackageFile Include="@(ReferencePath->'%(OriginalItemSpec)')"
							   Condition="'$(IncludeFrameworkReferencesInPackage)' == 'true' and '%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}'">
				<Kind>FrameworkReference</Kind>
			</PackageFile>
		</ItemGroup>

		<!-- If packaging the project, provide the metadata as a non-file item -->
		<ItemGroup Condition="'$(IsPackable)' == 'true'">
			<PackageFile Include="@(PackageTargetPath->'%(Id)')">
				<Kind>Metadata</Kind>
			</PackageFile>
		</ItemGroup>

		<ItemGroup>
			<PackageFile>
				<PackageId Condition="'$(IsPackable)' == 'true'">$(PackageId)</PackageId>
				<Platform>$(Platform)</Platform>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' != 'true'">$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>

		<AssignPackagePath Files="@(PackageFile)" Kinds="@(PackageItemKind)">
			<Output TaskParameter="AssignedFiles" ItemName="_PackageContent" />
		</AssignPackagePath>

		<MSBuild Projects="@(_NuGetizedProjectReference)"
					 Targets="GetPackageContents"
					 BuildInParallel="$(BuildInParallel)"
					 Properties="%(_NuGetizedProjectReference.SetConfiguration); %(_NuGetizedProjectReference.SetPlatform); BuildingPackage=$(BuildingPackage)"
					 Condition="'@(ProjectReferenceWithConfiguration)' != '' and '@(_NuGetizedProjectReference)' != ''"
					 RemoveProperties="%(_NuGetizedProjectReference.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedPackageContent" />
		</MSBuild>

		<ItemGroup>
			<_ReferencedPackageDependency Include="@(_ReferencedPackageContent)"
												Condition="'%(_ReferencedPackageContent.PackageId)' != '$(PackageId)' and '%(_ReferencedPackageContent.Kind)' == 'Metadata'">
				<!-- For consistency, annotate like the rest -->
				<PackageId Condition="'$(IsPackable)' == 'true'">$(PackageId)</PackageId>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' != 'true'">$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
				<Kind>Dependency</Kind>
			</_ReferencedPackageDependency>
			<!-- Remove the referenced package actual contents if it provides a manifest, since it will be a dependency in that case. -->
			<_PackageContentFromDependency Include="@(_ReferencedPackageContent)"
												 Condition="'%(_ReferencedPackageContent.PackageId)' != '' and 
										              '%(_ReferencedPackageContent.PackageId)' != '$(PackageId)'" />
			<_ReferencedPackageContent Remove="@(_PackageContentFromDependency)" />
		</ItemGroup>

		<!-- Always annotate package contents with the original target framework and moniker -->
		<CreateItem Include="@(_ReferencedPackageContent)" PreserveExistingMetadata="true"
						Condition="'@(_ReferencedPackageContent)' != ''"
						AdditionalMetadata="OriginalTargetFramework=%(TargetFramework);OriginalTargetFrameworkMoniker=%(TargetFrameworkMoniker)">
			<Output TaskParameter="Include" ItemName="_ReferencedPackageContentWithOriginalValues"/>
		</CreateItem>

		<ItemGroup Condition="'$(IsPackagingProject)' != 'true'">
			<!-- Retarget content for the currently building package, if necessary -->
			<_ReferencedPackageContentWithOriginalValues Condition="'%(_ReferencedPackageContentWithOriginalValues.PackageId)' == ''">
				<PackageId Condition="'$(IsPackable)' == 'true'">$(PackageId)</PackageId>
				<!-- Clear the target framework since it trumps the TFM in AsignPackagePath now -->
				<!-- Only do this for Library assets that come from project references that don't build nugets (PackageId=='' above) -->
				<TargetFramework Condition="'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Lib' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Lib'"></TargetFramework>
				<!-- NOTE: we're always overwriting the TFM in this case since 
					 this item will end up making up the contents of this package 
					 project in its current TFM configuration. 
					 TBD: we might want to preserve it anyways and adjust later 
					 (i.e. net45 project references netstandard1.6 project)
					 TODO: take into account multi-targetting.
				-->
				<TargetFrameworkMoniker>$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</_ReferencedPackageContentWithOriginalValues>
		</ItemGroup>
		<!-- Otherwise, assign target paths based on the original TFM -->
		<ItemGroup Condition="'$(IsPackagingProject)' == 'true'">
			<!-- Retarget content for the currently building package, if necessary -->
			<_ReferencedPackageContentWithOriginalValues Condition="'%(_ReferencedPackageContentWithOriginalValues.PackageId)' == ''">
				<PackageId Condition="'$(IsPackable)' == 'true'">$(PackageId)</PackageId>
				<!-- Clear the target framework since it trumps the TFM in AsignPackagePath now -->
				<!-- Only do this for Library assets that come from project references that don't build nugets (PackageId=='' above) -->
				<TargetFramework Condition="'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Lib' or 
											'%(_ReferencedPackageContentWithOriginalValues.Kind)' == 'Lib'"></TargetFramework>
				<TargetFrameworkMoniker>%(OriginalTargetFrameworkMoniker)</TargetFrameworkMoniker>
			</_ReferencedPackageContentWithOriginalValues>
		</ItemGroup>

		<!-- Ensure referenced package content gets assigned a package path if it didn't provide one already.
			 This happens for project references' that don't have a PackageId, since their package path will 
			 depend on the referencing project's TFM.
		-->
		<AssignPackagePath Files="@(_ReferencedPackageContentWithOriginalValues);@(_ReferencedPackageDependency)"
							   Kinds="@(PackageItemKind)"
							   IsPackaging="$(BuildingPackage)"
							   Condition="'@(_ReferencedPackageContentWithOriginalValues)' != '' Or '@(_ReferencedPackageDependency)' != ''">
			<Output TaskParameter="AssignedFiles" ItemName="_PackageContent" />
		</AssignPackagePath>
	</Target>

	<!-- This target separates project references that have the packaging targets from those that don't -->
	<Target Name="_SplitProjectReferencesByIsNuGetized"
			  Condition="'@(ProjectReferenceWithConfiguration)' != '' and '@(_MSBuildProjectReferenceExistent)' != ''"
			  Inputs="@(_MSBuildProjectReferenceExistent)"
			  Outputs="%(_MSBuildProjectReferenceExistent.Identity)-BATCH">

		<MSBuild Projects="@(_MSBuildProjectReferenceExistent)"
					 Targets="GetTargetPathWithTargetPlatformMoniker"
					 BuildInParallel="$(BuildInParallel)"
					 Properties="%(_MSBuildProjectReferenceExistent.SetConfiguration); %(_MSBuildProjectReferenceExistent.SetPlatform)"
					 RemoveProperties="%(_MSBuildProjectReferenceExistent.GlobalPropertiesToRemove)">
			<Output TaskParameter="TargetOutputs" ItemName="_ReferencedProjectTargetPath" />
		</MSBuild>

		<PropertyGroup>
			<_IsNuGetized Condition="'%(_ReferencedProjectTargetPath.IsNuGetized)' != ''">true</_IsNuGetized>
		</PropertyGroup>

		<ItemGroup>
			<!-- We will fail for this first group: project references that aren't excluded from packaging, yet haven't been nugetized -->
			<_NonNuGetizedProjectReference Include="@(_MSBuildProjectReferenceExistent)"
												 Condition="'%(_MSBuildProjectReferenceExistent.IncludeInPackage)' != 'false' and '$(_IsNuGetized)' != 'true'" />
			<!-- We will only process for packaging the project references that haven't been excluded from packaging and are nugetized -->
			<_NuGetizedProjectReference Include="@(_MSBuildProjectReferenceExistent)"
											  Condition="'%(_MSBuildProjectReferenceExistent.IncludeInPackage)' != 'false' and '$(_IsNuGetized)' == 'true'" />
		</ItemGroup>

	</Target>

	<Target Name="ReadLegacyDependencies" Condition="'$(InferLegacyPackageReferences)' == 'true'">
		<PropertyGroup>
			<_ProjectJson>$(MSBuildProjectDirectory)\project.json</_ProjectJson>
			<_PackagesConfig>$(MSBuildProjectDirectory)\packages.config</_PackagesConfig>
		</PropertyGroup>

		<ReadLegacyJsonDependencies ProjectJsonPath="$(_ProjectJson)" Condition="Exists('$(_ProjectJson)')">
			<Output TaskParameter="PackageReferences" ItemName="PackageReference" />
		</ReadLegacyJsonDependencies>

		<ReadLegacyConfigDependencies PackagesConfigPath="$(_PackagesConfig)" Condition="Exists('$(_PackagesConfig)')">
			<Output TaskParameter="PackageReferences" ItemName="PackageReference" />
		</ReadLegacyConfigDependencies>
	</Target>

	<!--
      Properties relevant to Visual Studio:
      $(BuildingInsideVisualStudio)       This will indicate whether this project is building inside the IDE. When
                                          building via MSBuild, this property will not be set.
      $(DesignTimeBuild)                  Visual Studio uses this property to indicate whether it's performing a
                                          design time build or a full build. A design time build is designed to do
                                          minimal amount of work; the intent of those builds is to expose information
                                          around resolved dependencies and properties back to Visual Studio without
                                          actually producing assets on disk.
	-->

	<PropertyGroup>
		<!-- We don't want to build in case we're performing a design time build as we are expected to not
         produce any assets.
         We also don't want to build the references in cases where we build inside the IDE. The reason
         is that Visual Studio already built our dependencies. Doing it again can regress performance.
         However, the real issue is that it impacts correctness as this can result in building the same
         project simultaneously from different projects.
         Most particularly on the correctness side, this shows up when VS is doing a "rebuild". NuProj
         will end up causing multiple build breaks being reported because it will re-delete outputs that
         VS just produced and that other project references that are building in parallel now expect to
         be there. -->
		<BuildProjectReferences Condition="'$(BuildProjectReferences)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(DesignTimeBuild)' == 'true')">false</BuildProjectReferences>
		<!-- By default we will build (and if applicable, clean) all project references. But this can be used
         to disable that. -->
		<BuildProjectReferences Condition="'$(BuildProjectReferences)' == ''">true</BuildProjectReferences>
	</PropertyGroup>

	<PropertyGroup>
		<BuildDependsOn Condition="('$(PackOnBuild)' == 'true' Or Exists('$(PackOnBuildFile)')) and '$(IsPackable)' == 'true'">
			$(BuildDependsOn);
			Pack;
		</BuildDependsOn>
		<PackDependsOn Condition="'$(IsPackagingProject)' != 'true'">
			CoreBuild;
		</PackDependsOn>
		<PackDependsOn>
			$(PackDependsOn)
			GetPackageTargetPath;
			GetPackageContents;
			_GenerateReferenceAssemblies;
		</PackDependsOn>
	</PropertyGroup>

	<!--
    =================================================================================================
	Pack
    =================================================================================================

    Creates the output .nupkg if the project is packable.
	
    OUTPUTS:
        @(PackageTargetPath)     The output path of the package that was built with its metadata.
    =================================================================================================
	-->
	<Target Name="Pack" DependsOnTargets="$(PackDependsOn)" Returns="@(PackageTargetPath)" Condition="'$(IsPackable)' == 'true'">
		<MakeDir Directories="$(PackageOutputPath)" Condition="!Exists('$(PackageOutputPath)')" />
		<CreatePackage Manifest="@(PackageTargetPath)" Contents="@(_PackageContent)" TargetPath="@(PackageTargetPath->'%(FullPath)')">
			<Output TaskParameter="OutputPackage" ItemName="_PackageTargetPath" />
			<Output TaskParameter="OutputPackage" ItemName="FileWrites" />
		</CreatePackage>

		<Message Importance="high" Text="Created package at %(_PackageTargetPath.FullPath)." />
	</Target>


	<PropertyGroup>
		<CleanDependsOn>$(CleanDependsOn);_CleanReferenceAssemblyIntermediateOutputs</CleanDependsOn>
	</PropertyGroup>

	<Target Name="_GetReferenceAssemblyTargetPaths" Condition=" '@(ReferenceAssemblyFramework)' != '' ">
		<ItemGroup>
			<_ReferenceAssemblyProjects Include="@(_MSBuildProjectReferenceExistent)" Condition="'%(_MSBuildProjectReferenceExistent.IncludeInPackage)' != 'false'" />
		</ItemGroup>

		<MSBuild
				Projects="@(_ReferenceAssemblyProjects)"
				Targets="GetTargetPathWithTargetPlatformMoniker">
			<Output TaskParameter="TargetOutputs" ItemName="IntersectionAssembly" />
		</MSBuild>

		<GetApiIntersectTargetPaths
				Frameworks="%(ReferenceAssemblyFramework.Identity)"
				RootOutputDirectory="$(IntermediateOutputPath)"
				Assemblies="@(IntersectionAssembly)">
			<Output TaskParameter="TargetPaths" ItemName="_ReferenceAssemblyTargetPath" />
		</GetApiIntersectTargetPaths>

		<ItemGroup>
			<PackageFile Include="@(_ReferenceAssemblyTargetPath)">
				<Kind>Lib</Kind>
				<TargetFrameworkMoniker>%(_ReferenceAssemblyTargetPath.TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>
	</Target>

	<Target Name="_GenerateReferenceAssemblies"
		  DependsOnTargets="_GetReferenceAssemblyTargetPaths"
		  Condition=" '@(ReferenceAssemblyFramework)' != '' "
		  Inputs="@(IntersectionAssembly)"
		  Outputs="@(_ReferenceAssemblyTargetPath)">

		<PropertyGroup>
			<EnableDefaultIntersectionAssemblyReferencePath Condition="'$(EnableDefaultIntersectionAssemblyReferencePath)' == ''">true</EnableDefaultIntersectionAssemblyReferencePath>
		</PropertyGroup>

		<ItemGroup>
			<_IntersectionReferencePath Include="@(IntersectionAssembly->'%(RootDir)%(Directory)')" Condition="'$(EnableDefaultIntersectionAssemblyReferencePath)' == 'true'" />
			<_IntersectionReferencePath Include="$(IntersectionAssemblyReferencePath)" />
		</ItemGroup>

		<ApiIntersect
				Framework="%(ReferenceAssemblyFramework.Identity)"
				RootOutputDirectory="$(IntermediateOutputPath)"
				IntersectionAssembly="@(IntersectionAssembly)"
				ReferencePath="@(_IntersectionReferencePath)"
				ExcludeType="$(IntersectionExcludeType)"
				RemoveAbstractTypeMembers="$(IntersectionRemoveAbstractTypeMembers)"
				ExcludeAssembly="@(IntersectionExcludeAssembly)"
				KeepInternalConstructors="$(IntersectionKeepInternalConstructors)"
				KeepMarshalling="$(IntersectionKeepMarshalling)"
				ToolPath="$(ApiIntersectToolPath)"
				ToolExe="$(ApiIntersectToolExe)">
			<Output TaskParameter="OutputDirectory" ItemName="_ReferenceAssemblyBuildInfo" />
		</ApiIntersect>

		<GenerateAssemblyInfo
				Assemblies="@(IntersectionAssembly)"
				OutputDirectories="@(_ReferenceAssemblyBuildInfo->'%(Identity)Contract')">
			<Output TaskParameter="AssemblyName" PropertyName="_ReferenceAssemblyName" />
		</GenerateAssemblyInfo>

		<MSBuild
				Projects="$(MSBuildThisFileDirectory)GenerateReferenceAssembly.csproj"
				Properties="
				AssemblyName=$(_ReferenceAssemblyName);
				SrcDir=%(_ReferenceAssemblyBuildInfo.FullPath);
				OutputPath=%(_ReferenceAssemblyBuildInfo.FullPath)bin\;
				IntermediateOutputPath=%(_ReferenceAssemblyBuildInfo.FullPath)obj\;
				TargetFrameworkVersion=%(_ReferenceAssemblyBuildInfo.TargetFrameworkVersion);
				TargetFrameworkProfile=%(_ReferenceAssemblyBuildInfo.TargetFrameworkProfile)" />
	</Target>

	<Target Name="_CleanReferenceAssemblyIntermediateOutputs" Condition=" '@(ReferenceAssemblyFramework)' != '' and Exists('$(IntermediateOutputPath)') ">
		<PropertyGroup>
			<_ReferenceAssemblyIntermediateOutputDirectories>$([System.IO.Directory]::GetDirectories('$(IntermediateOutputPath)'))</_ReferenceAssemblyIntermediateOutputDirectories>
		</PropertyGroup>

		<ItemGroup>
			<_ReferenceAssemblyIntermediateOutputDirectory Include="$(_ReferenceAssemblyIntermediateOutputDirectories)" />
		</ItemGroup>

		<RemoveDir Directories="@(_ReferenceAssemblyIntermediateOutputDirectory)" />
	</Target>

	<Import Project="NuGet.Build.Packaging.Authoring.targets" Condition="'$(IsPackagingProject)' == 'true'" />
</Project>