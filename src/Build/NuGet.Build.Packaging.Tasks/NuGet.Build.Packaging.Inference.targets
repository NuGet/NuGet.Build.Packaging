<!--
***********************************************************************************************
Microsoft.NuGet.Build.Packaging.Inference.targets

WARNING:  DO NOT MODIFY this file unless you are knowledgeable about MSBuild and have
          created a backup copy.  Incorrect changes to this file will make it
          impossible to load or build your projects from the command-line or the IDE.

Copyright (c) .NET Foundation. All rights reserved. 
***********************************************************************************************
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ReadLegacyJsonDependencies"    AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />
	<UsingTask TaskName="NuGet.Build.Packaging.Tasks.ReadLegacyConfigDependencies"  AssemblyFile="NuGet.Build.Packaging.Tasks.dll" />

	<PropertyGroup>
		<!-- Infer PackageReference elements from packages.config/project.json files in the project -->
		<InferLegacyPackageReferences Condition="'$(InferLegacyPackageReferences)' == ''">true</InferLegacyPackageReferences>

		<!-- The Kind of primary output (build, symbols and doc) set if IncludeOutputsInPackage = true -->
		<PrimaryOutputKind Condition="'$(PrimaryOutputKind)' == ''">Lib</PrimaryOutputKind>

		<!-- Whether to include @(Content) items with CopyToOutputDirectory != '' in the package -->
		<IncludeContentInPackage Condition="'$(IncludeContentInPackage)' == ''">true</IncludeContentInPackage>
		<!-- Whether to include @(None) items with CopyToOutputDirectory != '' in the package -->
		<IncludeNoneInPackage Condition="'$(IncludeNoneInPackage)' == ''">false</IncludeNoneInPackage>
		<!-- Whether to include @(BuiltProjectOutputGroupOutput), @(DocumentationProjectOutputGroupOutput) and @(SatelliteDllsProjectOutputGroupOutput) items in the package -->
		<IncludeOutputsInPackage Condition="'$(IncludeOutputsInPackage)' == ''">true</IncludeOutputsInPackage>
		<!-- Whether to include @(DebugSymbolsProjectOutputGroupOutput) items in the package -->
		<IncludeSymbolsInPackage Condition="'$(IncludeSymbolsInPackage)' == '' and '$(IncludeOutputsInPackage)' == 'true' and '$(Configuration)' == 'Debug'">true</IncludeSymbolsInPackage>
		<!-- Whether to include framework references (%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}') in the package -->

		<!-- Only default to true if the project isn't a nuget packaging project itself and its primary output is lib. -->
		<IncludeFrameworkReferencesInPackage Condition="'$(IncludeFrameworkReferencesInPackage)' == '' and '$(IsPackagingProject)' != 'true' and '$(PrimaryOutputKind)' == 'Lib'">true</IncludeFrameworkReferencesInPackage>
	</PropertyGroup>

	<PropertyGroup>
		<GetPackageContentsDependsOn>
			$(GetPackageContentsDependsOn);
			InferPackageContents
		</GetPackageContentsDependsOn>
	</PropertyGroup>

	<Target Name="InferPackageContents" DependsOnTargets="$(InferPackageContentsDependsOn)" Returns="@(PackageFile)">
		<!-- Determine whether primary output is framework specific  -->
		<ItemGroup Condition="'$(PrimaryOutputFrameworkSpecific)' == ''">
			<_PrimaryOutputKind Include="@(PackageItemKind->'%(FrameworkSpecific)')" Condition="'%(Identity)' == '$(PrimaryOutputKind)'" />
		</ItemGroup>
		<PropertyGroup Condition="'$(PrimaryOutputFrameworkSpecific)' == ''">
			<PrimaryOutputFrameworkSpecific>@(_PrimaryOutputKind)</PrimaryOutputFrameworkSpecific>
		</PropertyGroup>

		<ItemGroup>
			<_InferredPackageFile Include="@(BuiltProjectOutputGroupOutput -> '%(FinalOutputPath)');@(BuiltProjectOutputGroupKeyOutput -> '%(FinalOutputPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary output -->
				<Kind>$(PrimaryOutputKind)</Kind>
				<FrameworkSpecific>$(PrimaryOutputFrameworkSpecific)</FrameworkSpecific>
			</_InferredPackageFile>

			<!-- Remove when https://github.com/Microsoft/msbuild/pull/1076 ships -->
			<_DocumentationProjectOutputGroupOutput Include="@(DocumentationProjectOutputGroupOutput)"
														  Condition="'$(IncludeOutputsInPackage)' == 'true'">
				<FinalOutputPath Condition="$([System.IO.Path]::IsPathRooted('%(FinalOutputPath)')) == 'false'">$(MSBuildProjectDirectory)\%(FinalOutputPath)</FinalOutputPath>
			</_DocumentationProjectOutputGroupOutput>
			<_InferredPackageFile Include="@(_DocumentationProjectOutputGroupOutput -> '%(FinalOutputPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary docs -->
				<Kind>$(PrimaryOutputKind)</Kind>
				<FrameworkSpecific>$(PrimaryOutputFrameworkSpecific)</FrameworkSpecific>
			</_InferredPackageFile>

			<_InferredPackageFile Include="@(DebugSymbolsProjectOutputGroupOutput -> '%(FinalOutputPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IncludeSymbolsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute primary symbols -->
				<Kind>$(PrimaryOutputKind)</Kind>
				<FrameworkSpecific>$(PrimaryOutputFrameworkSpecific)</FrameworkSpecific>
			</_InferredPackageFile>

			<!-- Change to %(FinalOutputPath) when https://github.com/Microsoft/msbuild/pull/1115 ships -->
			<_InferredPackageFile Include="@(SatelliteDllsProjectOutputGroupOutput -> '%(FullPath)')"
							   Condition="'$(IncludeOutputsInPackage)' == 'true' and '$(IsPackagingProject)' != 'true'">
				<!-- Packaging projects don't contribute satellite dlls -->
				<Kind>$(PrimaryOutputKind)</Kind>
				<FrameworkSpecific>$(PrimaryOutputFrameworkSpecific)</FrameworkSpecific>
			</_InferredPackageFile>

			<!-- NOTE: Content is opt-out (must have Pack=false to exclude if IncludeContentInPackage=true) -->
			<!-- Stuff that is copied to output should be included from that output location -->
			<_InferredPackageFile Include="@(ContentWithTargetPath->'$(OutputPath)%(TargetPath)')"
							   Condition="
									'%(ContentWithTargetPath.CopyToOutputDirectory)' != '' and
									(
										'%(ContentWithTargetPath.Pack)' == 'true' or 
										'%(ContentWithTargetPath.Kind)' != '' or 
										('$(IncludeContentInPackage)' == 'true' and '%(ContentWithTargetPath.Pack)' != 'false')
									)">
				<Kind Condition="'%(ContentWithTargetPath.Kind)' == '' and '%(ContentWithTargetPath.CopyToOutputDirectory)' != ''">$(PrimaryOutputKind)</Kind>
			</_InferredPackageFile>
			<!-- Otherwise, include from source location -->
			<_InferredPackageFile Include="@(ContentWithTargetPath->'%(FullPath)')"
							   Condition="
									'%(ContentWithTargetPath.CopyToOutputDirectory)' == '' and
									(
										'%(ContentWithTargetPath.Pack)' == 'true' or 
										'%(ContentWithTargetPath.Kind)' != '' or 
										('$(IncludeContentInPackage)' == 'true' and '%(ContentWithTargetPath.Pack)' != 'false')
									)">
				<Kind Condition="'%(ContentWithTargetPath.Kind)' == ''">Content</Kind>
			</_InferredPackageFile>

			<!-- NOTE: None is also opt-out (must have Pack=false to exclude if IncludeNoneInPackage=true, but this property defaults to false) -->
			<!-- Likewise, include from target path if it's copied, from source path otherwise -->
			<_InferredPackageFile Include="@(_NoneWithTargetPath->'$(OutputPath)%(TargetPath)')"
							   Condition="
									'%(_NoneWithTargetPath.CopyToOutputDirectory)' != '' and
									(
										'%(_NoneWithTargetPath.Pack)' == 'true' or 
										'%(_NoneWithTargetPath.Kind)' != '' or 
										('$(IncludeNoneInPackage)' == 'true' and '%(_NoneWithTargetPath.Pack)' != 'false')
									)">
				<Kind Condition="'%(_NoneWithTargetPath.Kind)' == '' and '%(_NoneWithTargetPath.CopyToOutputDirectory)' != ''">$(PrimaryOutputKind)</Kind>
			</_InferredPackageFile>
			<_InferredPackageFile Include="@(_NoneWithTargetPath->'%(FullPath)')"
							   Condition="
									'%(_NoneWithTargetPath.CopyToOutputDirectory)' == '' and
									(
										'%(_NoneWithTargetPath.Pack)' == 'true' or 
										'%(_NoneWithTargetPath.Kind)' != '' or 
										('$(IncludeNoneInPackage)' == 'true' and '%(_NoneWithTargetPath.Pack)' != 'false')
									)">
				<Kind Condition="'%(_NoneWithTargetPath.Kind)' == ''">None</Kind>
			</_InferredPackageFile>


			<_InferredPackageFile Include="@(PackageReference)" Condition="'%(Identity)' != 'NuGet.Build.Packaging'">
				<Kind>Dependency</Kind>
			</_InferredPackageFile>

			<!-- We can't use %(FrameworkFile)==true because it's not defined for raw file references and 
			     it also includes mscorlib which we don't need
			     TBD: maybe include ResolvedFrom=ImplicitlyExpandDesignTimeFacades too? -->
			<_InferredPackageFile Include="@(ReferencePath->'%(OriginalItemSpec)')"
							   Condition="'$(IncludeFrameworkReferencesInPackage)' == 'true' and '%(ReferencePath.ResolvedFrom)' == '{TargetFrameworkDirectory}'">
				<Kind>FrameworkReference</Kind>
			</_InferredPackageFile>
		</ItemGroup>

		<ItemGroup>
			<!-- 
				PackageId metadata on all PackageFile items means we can tell appart which ones came from which dependencies 
				NOTE: if PackageId is empty, we won't generate a manifest and it means the files need to be packed with the
				current project.
			-->
			<PackageFile Include="@(_InferredPackageFile -> Distinct())">
				<Source>Implicit</Source>
				<PackageId Condition="'$(IsPackable)' == 'true'">$(PackageId)</PackageId>
				<Platform>$(Platform)</Platform>
				<TargetFrameworkMoniker Condition="'$(IsPackagingProject)' != 'true'">$(TargetFrameworkMoniker)</TargetFrameworkMoniker>
			</PackageFile>
		</ItemGroup>
	</Target>

	<Target Name="_SetInferPackageContentsDependsOn" AfterTargets="_SetPropertiesFromCapabilities">
		<PropertyGroup>
			<!-- NOTE: this avoids taking dependencies on targets that are only available when the project supports the concept of references -->
			<_SupportsReferences Condition="
						$(_AllProjectCapabilities.Contains('AssemblyReferences')) or 
						$(_AllProjectCapabilities.Contains('COMReferences')) or
						$(_AllProjectCapabilities.Contains('ProjectReferences')) or 
						$(_AllProjectCapabilities.Contains('WinRTReferences')) or
						$(_AllProjectCapabilities.Contains('SDKReferences'))">true</_SupportsReferences>

			<!-- Only depend on ResolveReferences if we need to include framework references -->
			<InferPackageContentsDependsOn Condition="'$(IncludeFrameworkReferencesInPackage)' == 'true' and '$(_SupportsReferences)' == 'true'">
				ResolveReferences
			</InferPackageContentsDependsOn>
			<InferPackageContentsDependsOn>
				$(InferPackageContentsDependsOn);
				GetPackageTargetPath
			</InferPackageContentsDependsOn>
			<InferPackageContentsDependsOn Condition="$(_AllProjectCapabilities.Contains('AllTargetOutputGroups'))">
				$(InferPackageContentsDependsOn);
				AllProjectOutputGroups
			</InferPackageContentsDependsOn>
		</PropertyGroup>
	</Target>

	<Target Name="ReadLegacyDependencies" BeforeTargets="InferPackageContents" Condition="'$(InferLegacyPackageReferences)' == 'true'">
		<PropertyGroup>
			<_ProjectJson>$(MSBuildProjectDirectory)\project.json</_ProjectJson>
			<_PackagesConfig>$(MSBuildProjectDirectory)\packages.config</_PackagesConfig>
		</PropertyGroup>

		<ReadLegacyJsonDependencies ProjectJsonPath="$(_ProjectJson)" Condition="Exists('$(_ProjectJson)')">
			<Output TaskParameter="PackageReferences" ItemName="PackageReference" />
		</ReadLegacyJsonDependencies>

		<ReadLegacyConfigDependencies PackagesConfigPath="$(_PackagesConfig)" Condition="Exists('$(_PackagesConfig)')">
			<Output TaskParameter="PackageReferences" ItemName="PackageReference" />
		</ReadLegacyConfigDependencies>
	</Target>

</Project>